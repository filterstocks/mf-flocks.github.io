webpackHotUpdate_N_E("pages/index",{

/***/ "./node_modules/.prisma/client/index-browser.js":
/*!******************************************************!*\
  !*** ./node_modules/.prisma/client/index-browser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n\nconst {\n  Decimal\n} = __webpack_require__(/*! @prisma/client/runtime/index-browser */ \"./node_modules/@prisma/client/runtime/index-browser.js\")\n\n\nconst Prisma = {}\n\nexports.Prisma = Prisma\n\n/**\n * Prisma Client JS version: 2.13.1\n * Query Engine version: fcbc4bb2d306c86c28014f596b1e8c7980af8bd4\n */\nPrisma.prismaVersion = {\n  client: \"2.13.1\",\n  engine: \"fcbc4bb2d306c86c28014f596b1e8c7980af8bd4\"\n}\n\nPrisma.PrismaClientKnownRequestError = () => {\n  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,\n)};\nPrisma.PrismaClientUnknownRequestError = () => {\n  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,\n)}\nPrisma.PrismaClientRustPanicError = () => {\n  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,\n)}\nPrisma.PrismaClientInitializationError = () => {\n  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,\n)}\nPrisma.PrismaClientValidationError = () => {\n  throw new Error(`PrismaClientValidationError is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,\n)}\nPrisma.Decimal = Decimal\n\n/**\n * Re-export of sql-template-tag\n */\n\nPrisma.sql = () => {\n  throw new Error(`sqltag is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,\n)}\nPrisma.empty = () => {\n  throw new Error(`empty is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,\n)}\nPrisma.join = () => {\n  throw new Error(`join is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,\n)}\nPrisma.raw = () => {\n  throw new Error(`raw is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,\n)}\n\n/**\n * Enums\n */\n// Based on\n// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275\nfunction makeEnum(x) { return x; }\n\nexports.Prisma.MetadataScalarFieldEnum = makeEnum({\n  id: 'id',\n  stock_name: 'stock_name',\n  isin: 'isin',\n  symbol: 'symbol',\n  paid_up_value: 'paid_up_value',\n  face_value: 'face_value',\n  created_at: 'created_at'\n});\n\nexports.Prisma.Mf_aumScalarFieldEnum = makeEnum({\n  id: 'id',\n  fund_house: 'fund_house',\n  month: 'month',\n  year: 'year',\n  aum: 'aum',\n  created_at: 'created_at'\n});\n\nexports.Prisma.Mutual_fundsScalarFieldEnum = makeEnum({\n  id: 'id',\n  fund_house: 'fund_house',\n  month: 'month',\n  year: 'year',\n  stock_name: 'stock_name',\n  isin: 'isin',\n  industry: 'industry',\n  quantity: 'quantity',\n  market_value: 'market_value',\n  percentage: 'percentage',\n  created_at: 'created_at',\n  updated_at: 'updated_at'\n});\n\nexports.Prisma.Mf_diffScalarFieldEnum = makeEnum({\n  id: 'id',\n  fund_house: 'fund_house',\n  fund_name: 'fund_name',\n  stock_name: 'stock_name',\n  isin: 'isin',\n  industry: 'industry',\n  current_month: 'current_month',\n  current_year: 'current_year',\n  previous_month: 'previous_month',\n  previous_year: 'previous_year',\n  state: 'state',\n  current_quantity: 'current_quantity',\n  previous_quantity: 'previous_quantity',\n  change_quantity: 'change_quantity',\n  change_market_value: 'change_market_value',\n  change_percentage_aum: 'change_percentage_aum',\n  created_at: 'created_at',\n  updated_at: 'updated_at'\n});\n\nexports.Prisma.SortOrder = makeEnum({\n  asc: 'asc',\n  desc: 'desc'\n});\n\n\nexports.Prisma.ModelName = makeEnum({\n  metadata: 'metadata',\n  mf_aum: 'mf_aum',\n  mutual_funds: 'mutual_funds',\n  mf_diff: 'mf_diff'\n});\n\n/**\n * Create the Client\n */\nclass PrismaClient {\n  constructor() {\n    throw new Error(\n      `PrismaClient is unable to be run in the browser.\nIn case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,\n    )\n  }\n}\nexports.PrismaClient = PrismaClient\n\nObject.assign(exports, Prisma)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzLy5wcmlzbWEvY2xpZW50L2luZGV4LWJyb3dzZXIuanM/NzZmYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsOENBQThDLGNBQWM7O0FBRTVEO0FBQ0E7QUFDQSxDQUFDLEdBQUcsbUJBQU8sQ0FBQyxvR0FBc0M7OztBQUdsRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixVQUFVOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLnByaXNtYS9jbGllbnQvaW5kZXgtYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5jb25zdCB7XG4gIERlY2ltYWxcbn0gPSByZXF1aXJlKCdAcHJpc21hL2NsaWVudC9ydW50aW1lL2luZGV4LWJyb3dzZXInKVxuXG5cbmNvbnN0IFByaXNtYSA9IHt9XG5cbmV4cG9ydHMuUHJpc21hID0gUHJpc21hXG5cbi8qKlxuICogUHJpc21hIENsaWVudCBKUyB2ZXJzaW9uOiAyLjEzLjFcbiAqIFF1ZXJ5IEVuZ2luZSB2ZXJzaW9uOiBmY2JjNGJiMmQzMDZjODZjMjgwMTRmNTk2YjFlOGM3OTgwYWY4YmQ0XG4gKi9cblByaXNtYS5wcmlzbWFWZXJzaW9uID0ge1xuICBjbGllbnQ6IFwiMi4xMy4xXCIsXG4gIGVuZ2luZTogXCJmY2JjNGJiMmQzMDZjODZjMjgwMTRmNTk2YjFlOGM3OTgwYWY4YmQ0XCJcbn1cblxuUHJpc21hLlByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoYFByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yIGlzIHVuYWJsZSB0byBiZSBydW4gaW4gdGhlIGJyb3dzZXIuXG5JbiBjYXNlIHRoaXMgZXJyb3IgaXMgdW5leHBlY3RlZCBmb3IgeW91LCBwbGVhc2UgcmVwb3J0IGl0IGluIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hL2lzc3Vlc2AsXG4pfTtcblByaXNtYS5QcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoYFByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3IgaXMgdW5hYmxlIHRvIGJlIHJ1biBpbiB0aGUgYnJvd3Nlci5cbkluIGNhc2UgdGhpcyBlcnJvciBpcyB1bmV4cGVjdGVkIGZvciB5b3UsIHBsZWFzZSByZXBvcnQgaXQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3ByaXNtYS9wcmlzbWEvaXNzdWVzYCxcbil9XG5QcmlzbWEuUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3IgPSAoKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcihgUHJpc21hQ2xpZW50UnVzdFBhbmljRXJyb3IgaXMgdW5hYmxlIHRvIGJlIHJ1biBpbiB0aGUgYnJvd3Nlci5cbkluIGNhc2UgdGhpcyBlcnJvciBpcyB1bmV4cGVjdGVkIGZvciB5b3UsIHBsZWFzZSByZXBvcnQgaXQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3ByaXNtYS9wcmlzbWEvaXNzdWVzYCxcbil9XG5QcmlzbWEuUHJpc21hQ2xpZW50SW5pdGlhbGl6YXRpb25FcnJvciA9ICgpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKGBQcmlzbWFDbGllbnRJbml0aWFsaXphdGlvbkVycm9yIGlzIHVuYWJsZSB0byBiZSBydW4gaW4gdGhlIGJyb3dzZXIuXG5JbiBjYXNlIHRoaXMgZXJyb3IgaXMgdW5leHBlY3RlZCBmb3IgeW91LCBwbGVhc2UgcmVwb3J0IGl0IGluIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hL2lzc3Vlc2AsXG4pfVxuUHJpc21hLlByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvciA9ICgpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKGBQcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3IgaXMgdW5hYmxlIHRvIGJlIHJ1biBpbiB0aGUgYnJvd3Nlci5cbkluIGNhc2UgdGhpcyBlcnJvciBpcyB1bmV4cGVjdGVkIGZvciB5b3UsIHBsZWFzZSByZXBvcnQgaXQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3ByaXNtYS9wcmlzbWEvaXNzdWVzYCxcbil9XG5QcmlzbWEuRGVjaW1hbCA9IERlY2ltYWxcblxuLyoqXG4gKiBSZS1leHBvcnQgb2Ygc3FsLXRlbXBsYXRlLXRhZ1xuICovXG5cblByaXNtYS5zcWwgPSAoKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcihgc3FsdGFnIGlzIHVuYWJsZSB0byBiZSBydW4gaW4gdGhlIGJyb3dzZXIuXG5JbiBjYXNlIHRoaXMgZXJyb3IgaXMgdW5leHBlY3RlZCBmb3IgeW91LCBwbGVhc2UgcmVwb3J0IGl0IGluIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hL2lzc3Vlc2AsXG4pfVxuUHJpc21hLmVtcHR5ID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoYGVtcHR5IGlzIHVuYWJsZSB0byBiZSBydW4gaW4gdGhlIGJyb3dzZXIuXG5JbiBjYXNlIHRoaXMgZXJyb3IgaXMgdW5leHBlY3RlZCBmb3IgeW91LCBwbGVhc2UgcmVwb3J0IGl0IGluIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hL2lzc3Vlc2AsXG4pfVxuUHJpc21hLmpvaW4gPSAoKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcihgam9pbiBpcyB1bmFibGUgdG8gYmUgcnVuIGluIHRoZSBicm93c2VyLlxuSW4gY2FzZSB0aGlzIGVycm9yIGlzIHVuZXhwZWN0ZWQgZm9yIHlvdSwgcGxlYXNlIHJlcG9ydCBpdCBpbiBodHRwczovL2dpdGh1Yi5jb20vcHJpc21hL3ByaXNtYS9pc3N1ZXNgLFxuKX1cblByaXNtYS5yYXcgPSAoKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcihgcmF3IGlzIHVuYWJsZSB0byBiZSBydW4gaW4gdGhlIGJyb3dzZXIuXG5JbiBjYXNlIHRoaXMgZXJyb3IgaXMgdW5leHBlY3RlZCBmb3IgeW91LCBwbGVhc2UgcmVwb3J0IGl0IGluIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hL2lzc3Vlc2AsXG4pfVxuXG4vKipcbiAqIEVudW1zXG4gKi9cbi8vIEJhc2VkIG9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzMxOTIjaXNzdWVjb21tZW50LTI2MTcyMDI3NVxuZnVuY3Rpb24gbWFrZUVudW0oeCkgeyByZXR1cm4geDsgfVxuXG5leHBvcnRzLlByaXNtYS5NZXRhZGF0YVNjYWxhckZpZWxkRW51bSA9IG1ha2VFbnVtKHtcbiAgaWQ6ICdpZCcsXG4gIHN0b2NrX25hbWU6ICdzdG9ja19uYW1lJyxcbiAgaXNpbjogJ2lzaW4nLFxuICBzeW1ib2w6ICdzeW1ib2wnLFxuICBwYWlkX3VwX3ZhbHVlOiAncGFpZF91cF92YWx1ZScsXG4gIGZhY2VfdmFsdWU6ICdmYWNlX3ZhbHVlJyxcbiAgY3JlYXRlZF9hdDogJ2NyZWF0ZWRfYXQnXG59KTtcblxuZXhwb3J0cy5QcmlzbWEuTWZfYXVtU2NhbGFyRmllbGRFbnVtID0gbWFrZUVudW0oe1xuICBpZDogJ2lkJyxcbiAgZnVuZF9ob3VzZTogJ2Z1bmRfaG91c2UnLFxuICBtb250aDogJ21vbnRoJyxcbiAgeWVhcjogJ3llYXInLFxuICBhdW06ICdhdW0nLFxuICBjcmVhdGVkX2F0OiAnY3JlYXRlZF9hdCdcbn0pO1xuXG5leHBvcnRzLlByaXNtYS5NdXR1YWxfZnVuZHNTY2FsYXJGaWVsZEVudW0gPSBtYWtlRW51bSh7XG4gIGlkOiAnaWQnLFxuICBmdW5kX2hvdXNlOiAnZnVuZF9ob3VzZScsXG4gIG1vbnRoOiAnbW9udGgnLFxuICB5ZWFyOiAneWVhcicsXG4gIHN0b2NrX25hbWU6ICdzdG9ja19uYW1lJyxcbiAgaXNpbjogJ2lzaW4nLFxuICBpbmR1c3RyeTogJ2luZHVzdHJ5JyxcbiAgcXVhbnRpdHk6ICdxdWFudGl0eScsXG4gIG1hcmtldF92YWx1ZTogJ21hcmtldF92YWx1ZScsXG4gIHBlcmNlbnRhZ2U6ICdwZXJjZW50YWdlJyxcbiAgY3JlYXRlZF9hdDogJ2NyZWF0ZWRfYXQnLFxuICB1cGRhdGVkX2F0OiAndXBkYXRlZF9hdCdcbn0pO1xuXG5leHBvcnRzLlByaXNtYS5NZl9kaWZmU2NhbGFyRmllbGRFbnVtID0gbWFrZUVudW0oe1xuICBpZDogJ2lkJyxcbiAgZnVuZF9ob3VzZTogJ2Z1bmRfaG91c2UnLFxuICBmdW5kX25hbWU6ICdmdW5kX25hbWUnLFxuICBzdG9ja19uYW1lOiAnc3RvY2tfbmFtZScsXG4gIGlzaW46ICdpc2luJyxcbiAgaW5kdXN0cnk6ICdpbmR1c3RyeScsXG4gIGN1cnJlbnRfbW9udGg6ICdjdXJyZW50X21vbnRoJyxcbiAgY3VycmVudF95ZWFyOiAnY3VycmVudF95ZWFyJyxcbiAgcHJldmlvdXNfbW9udGg6ICdwcmV2aW91c19tb250aCcsXG4gIHByZXZpb3VzX3llYXI6ICdwcmV2aW91c195ZWFyJyxcbiAgc3RhdGU6ICdzdGF0ZScsXG4gIGN1cnJlbnRfcXVhbnRpdHk6ICdjdXJyZW50X3F1YW50aXR5JyxcbiAgcHJldmlvdXNfcXVhbnRpdHk6ICdwcmV2aW91c19xdWFudGl0eScsXG4gIGNoYW5nZV9xdWFudGl0eTogJ2NoYW5nZV9xdWFudGl0eScsXG4gIGNoYW5nZV9tYXJrZXRfdmFsdWU6ICdjaGFuZ2VfbWFya2V0X3ZhbHVlJyxcbiAgY2hhbmdlX3BlcmNlbnRhZ2VfYXVtOiAnY2hhbmdlX3BlcmNlbnRhZ2VfYXVtJyxcbiAgY3JlYXRlZF9hdDogJ2NyZWF0ZWRfYXQnLFxuICB1cGRhdGVkX2F0OiAndXBkYXRlZF9hdCdcbn0pO1xuXG5leHBvcnRzLlByaXNtYS5Tb3J0T3JkZXIgPSBtYWtlRW51bSh7XG4gIGFzYzogJ2FzYycsXG4gIGRlc2M6ICdkZXNjJ1xufSk7XG5cblxuZXhwb3J0cy5QcmlzbWEuTW9kZWxOYW1lID0gbWFrZUVudW0oe1xuICBtZXRhZGF0YTogJ21ldGFkYXRhJyxcbiAgbWZfYXVtOiAnbWZfYXVtJyxcbiAgbXV0dWFsX2Z1bmRzOiAnbXV0dWFsX2Z1bmRzJyxcbiAgbWZfZGlmZjogJ21mX2RpZmYnXG59KTtcblxuLyoqXG4gKiBDcmVhdGUgdGhlIENsaWVudFxuICovXG5jbGFzcyBQcmlzbWFDbGllbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgUHJpc21hQ2xpZW50IGlzIHVuYWJsZSB0byBiZSBydW4gaW4gdGhlIGJyb3dzZXIuXG5JbiBjYXNlIHRoaXMgZXJyb3IgaXMgdW5leHBlY3RlZCBmb3IgeW91LCBwbGVhc2UgcmVwb3J0IGl0IGluIGh0dHBzOi8vZ2l0aHViLmNvbS9wcmlzbWEvcHJpc21hLWNsaWVudC1qcy9pc3N1ZXNgLFxuICAgIClcbiAgfVxufVxuZXhwb3J0cy5QcmlzbWFDbGllbnQgPSBQcmlzbWFDbGllbnRcblxuT2JqZWN0LmFzc2lnbihleHBvcnRzLCBQcmlzbWEpXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/.prisma/client/index-browser.js\n");

/***/ }),

/***/ "./node_modules/@prisma/client/index-browser.js":
/*!******************************************************!*\
  !*** ./node_modules/@prisma/client/index-browser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const prisma = __webpack_require__(/*! .prisma/client/index-browser */ \"./node_modules/.prisma/client/index-browser.js\")\n\nmodule.exports = prisma\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BwcmlzbWEvY2xpZW50L2luZGV4LWJyb3dzZXIuanM/ZDVjYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsb0ZBQThCOztBQUVyRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcHJpc21hL2NsaWVudC9pbmRleC1icm93c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcHJpc21hID0gcmVxdWlyZSgnLnByaXNtYS9jbGllbnQvaW5kZXgtYnJvd3NlcicpXG5cbm1vZHVsZS5leHBvcnRzID0gcHJpc21hXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@prisma/client/index-browser.js\n");

/***/ }),

/***/ "./node_modules/@prisma/client/runtime/index-browser.js":
/*!**************************************************************!*\
  !*** ./node_modules/@prisma/client/runtime/index-browser.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __markAsModule = (target) => __defProp(target, \"__esModule\", {value: true});\nvar __commonJS = (callback, module2) => () => {\n  if (!module2) {\n    module2 = {exports: {}};\n    callback(module2.exports, module2);\n  }\n  return module2.exports;\n};\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all)\n    __defProp(target, name, {get: all[name], enumerable: true});\n};\nvar __exportStar = (target, module2, desc) => {\n  __markAsModule(target);\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2))\n      if (!__hasOwnProp.call(target, key) && key !== \"default\")\n        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});\n  }\n  return target;\n};\nvar __toModule = (module2) => {\n  if (module2 && module2.__esModule)\n    return module2;\n  return __exportStar(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", {value: module2, enumerable: true}), module2);\n};\n\n// ../../node_modules/.pnpm/decimal.js@10.2.1/node_modules/decimal.js/decimal.js\nvar require_decimal = __commonJS((exports2, module2) => {\n  (function(globalScope) {\n    \"use strict\";\n    var EXP_LIMIT = 9e15, MAX_DIGITS = 1e9, NUMERALS = \"0123456789abcdef\", LN10 = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", PI = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", DEFAULTS = {\n      precision: 20,\n      rounding: 4,\n      modulo: 1,\n      toExpNeg: -7,\n      toExpPos: 21,\n      minE: -EXP_LIMIT,\n      maxE: EXP_LIMIT,\n      crypto: false\n    }, Decimal, inexact, noConflict, quadrant, external = true, decimalError = \"[DecimalError] \", invalidArgument = decimalError + \"Invalid argument: \", precisionLimitExceeded = decimalError + \"Precision limit exceeded\", cryptoUnavailable = decimalError + \"crypto unavailable\", mathfloor = Math.floor, mathpow = Math.pow, isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, LN10_PRECISION = LN10.length - 1, PI_PRECISION = PI.length - 1, P = {name: \"[object Decimal]\"};\n    P.absoluteValue = P.abs = function() {\n      var x = new this.constructor(this);\n      if (x.s < 0)\n        x.s = 1;\n      return finalise(x);\n    };\n    P.ceil = function() {\n      return finalise(new this.constructor(this), this.e + 1, 2);\n    };\n    P.comparedTo = P.cmp = function(y) {\n      var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;\n      if (!xd || !yd) {\n        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\n      }\n      if (!xd[0] || !yd[0])\n        return xd[0] ? xs : yd[0] ? -ys : 0;\n      if (xs !== ys)\n        return xs;\n      if (x.e !== y.e)\n        return x.e > y.e ^ xs < 0 ? 1 : -1;\n      xdL = xd.length;\n      ydL = yd.length;\n      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\n        if (xd[i] !== yd[i])\n          return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\n      }\n      return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\n    };\n    P.cosine = P.cos = function() {\n      var pr, rm, x = this, Ctor = x.constructor;\n      if (!x.d)\n        return new Ctor(NaN);\n      if (!x.d[0])\n        return new Ctor(1);\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n      Ctor.rounding = 1;\n      x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\n      Ctor.precision = pr;\n      Ctor.rounding = rm;\n      return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\n    };\n    P.cubeRoot = P.cbrt = function() {\n      var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;\n      if (!x.isFinite() || x.isZero())\n        return new Ctor(x);\n      external = false;\n      s = x.s * mathpow(x.s * x, 1 / 3);\n      if (!s || Math.abs(s) == 1 / 0) {\n        n = digitsToString(x.d);\n        e = x.e;\n        if (s = (e - n.length + 1) % 3)\n          n += s == 1 || s == -2 ? \"0\" : \"00\";\n        s = mathpow(n, 1 / 3);\n        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\n        if (s == 1 / 0) {\n          n = \"5e\" + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n        }\n        r = new Ctor(n);\n        r.s = x.s;\n      } else {\n        r = new Ctor(s.toString());\n      }\n      sd = (e = Ctor.precision) + 3;\n      for (; ; ) {\n        t = r;\n        t3 = t.times(t).times(t);\n        t3plusx = t3.plus(x);\n        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n          n = n.slice(sd - 3, sd + 1);\n          if (n == \"9999\" || !rep && n == \"4999\") {\n            if (!rep) {\n              finalise(t, e + 1, 0);\n              if (t.times(t).times(t).eq(x)) {\n                r = t;\n                break;\n              }\n            }\n            sd += 4;\n            rep = 1;\n          } else {\n            if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n              finalise(r, e + 1, 1);\n              m = !r.times(r).times(r).eq(x);\n            }\n            break;\n          }\n        }\n      }\n      external = true;\n      return finalise(r, e, Ctor.rounding, m);\n    };\n    P.decimalPlaces = P.dp = function() {\n      var w, d = this.d, n = NaN;\n      if (d) {\n        w = d.length - 1;\n        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\n        w = d[w];\n        if (w)\n          for (; w % 10 == 0; w /= 10)\n            n--;\n        if (n < 0)\n          n = 0;\n      }\n      return n;\n    };\n    P.dividedBy = P.div = function(y) {\n      return divide(this, new this.constructor(y));\n    };\n    P.dividedToIntegerBy = P.divToInt = function(y) {\n      var x = this, Ctor = x.constructor;\n      return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\n    };\n    P.equals = P.eq = function(y) {\n      return this.cmp(y) === 0;\n    };\n    P.floor = function() {\n      return finalise(new this.constructor(this), this.e + 1, 3);\n    };\n    P.greaterThan = P.gt = function(y) {\n      return this.cmp(y) > 0;\n    };\n    P.greaterThanOrEqualTo = P.gte = function(y) {\n      var k = this.cmp(y);\n      return k == 1 || k === 0;\n    };\n    P.hyperbolicCosine = P.cosh = function() {\n      var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);\n      if (!x.isFinite())\n        return new Ctor(x.s ? 1 / 0 : NaN);\n      if (x.isZero())\n        return one;\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n      Ctor.rounding = 1;\n      len = x.d.length;\n      if (len < 32) {\n        k = Math.ceil(len / 3);\n        n = (1 / tinyPow(4, k)).toString();\n      } else {\n        k = 16;\n        n = \"2.3283064365386962890625e-10\";\n      }\n      x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\n      var cosh2_x, i = k, d8 = new Ctor(8);\n      for (; i--; ) {\n        cosh2_x = x.times(x);\n        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\n      }\n      return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\n    };\n    P.hyperbolicSine = P.sinh = function() {\n      var k, pr, rm, len, x = this, Ctor = x.constructor;\n      if (!x.isFinite() || x.isZero())\n        return new Ctor(x);\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\n      Ctor.rounding = 1;\n      len = x.d.length;\n      if (len < 3) {\n        x = taylorSeries(Ctor, 2, x, x, true);\n      } else {\n        k = 1.4 * Math.sqrt(len);\n        k = k > 16 ? 16 : k | 0;\n        x = x.times(1 / tinyPow(5, k));\n        x = taylorSeries(Ctor, 2, x, x, true);\n        var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n        for (; k--; ) {\n          sinh2_x = x.times(x);\n          x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\n        }\n      }\n      Ctor.precision = pr;\n      Ctor.rounding = rm;\n      return finalise(x, pr, rm, true);\n    };\n    P.hyperbolicTangent = P.tanh = function() {\n      var pr, rm, x = this, Ctor = x.constructor;\n      if (!x.isFinite())\n        return new Ctor(x.s);\n      if (x.isZero())\n        return new Ctor(x);\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      Ctor.precision = pr + 7;\n      Ctor.rounding = 1;\n      return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\n    };\n    P.inverseCosine = P.acos = function() {\n      var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;\n      if (k !== -1) {\n        return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);\n      }\n      if (x.isZero())\n        return getPi(Ctor, pr + 4, rm).times(0.5);\n      Ctor.precision = pr + 6;\n      Ctor.rounding = 1;\n      x = x.asin();\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n      Ctor.precision = pr;\n      Ctor.rounding = rm;\n      return halfPi.minus(x);\n    };\n    P.inverseHyperbolicCosine = P.acosh = function() {\n      var pr, rm, x = this, Ctor = x.constructor;\n      if (x.lte(1))\n        return new Ctor(x.eq(1) ? 0 : NaN);\n      if (!x.isFinite())\n        return new Ctor(x);\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\n      Ctor.rounding = 1;\n      external = false;\n      x = x.times(x).minus(1).sqrt().plus(x);\n      external = true;\n      Ctor.precision = pr;\n      Ctor.rounding = rm;\n      return x.ln();\n    };\n    P.inverseHyperbolicSine = P.asinh = function() {\n      var pr, rm, x = this, Ctor = x.constructor;\n      if (!x.isFinite() || x.isZero())\n        return new Ctor(x);\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\n      Ctor.rounding = 1;\n      external = false;\n      x = x.times(x).plus(1).sqrt().plus(x);\n      external = true;\n      Ctor.precision = pr;\n      Ctor.rounding = rm;\n      return x.ln();\n    };\n    P.inverseHyperbolicTangent = P.atanh = function() {\n      var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;\n      if (!x.isFinite())\n        return new Ctor(NaN);\n      if (x.e >= 0)\n        return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      xsd = x.sd();\n      if (Math.max(xsd, pr) < 2 * -x.e - 1)\n        return finalise(new Ctor(x), pr, rm, true);\n      Ctor.precision = wpr = xsd - x.e;\n      x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\n      Ctor.precision = pr + 4;\n      Ctor.rounding = 1;\n      x = x.ln();\n      Ctor.precision = pr;\n      Ctor.rounding = rm;\n      return x.times(0.5);\n    };\n    P.inverseSine = P.asin = function() {\n      var halfPi, k, pr, rm, x = this, Ctor = x.constructor;\n      if (x.isZero())\n        return new Ctor(x);\n      k = x.abs().cmp(1);\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      if (k !== -1) {\n        if (k === 0) {\n          halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\n          halfPi.s = x.s;\n          return halfPi;\n        }\n        return new Ctor(NaN);\n      }\n      Ctor.precision = pr + 6;\n      Ctor.rounding = 1;\n      x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\n      Ctor.precision = pr;\n      Ctor.rounding = rm;\n      return x.times(2);\n    };\n    P.inverseTangent = P.atan = function() {\n      var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;\n      if (!x.isFinite()) {\n        if (!x.s)\n          return new Ctor(NaN);\n        if (pr + 4 <= PI_PRECISION) {\n          r = getPi(Ctor, pr + 4, rm).times(0.5);\n          r.s = x.s;\n          return r;\n        }\n      } else if (x.isZero()) {\n        return new Ctor(x);\n      } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\n        r = getPi(Ctor, pr + 4, rm).times(0.25);\n        r.s = x.s;\n        return r;\n      }\n      Ctor.precision = wpr = pr + 10;\n      Ctor.rounding = 1;\n      k = Math.min(28, wpr / LOG_BASE + 2 | 0);\n      for (i = k; i; --i)\n        x = x.div(x.times(x).plus(1).sqrt().plus(1));\n      external = false;\n      j = Math.ceil(wpr / LOG_BASE);\n      n = 1;\n      x2 = x.times(x);\n      r = new Ctor(x);\n      px = x;\n      for (; i !== -1; ) {\n        px = px.times(x2);\n        t = r.minus(px.div(n += 2));\n        px = px.times(x2);\n        r = t.plus(px.div(n += 2));\n        if (r.d[j] !== void 0)\n          for (i = j; r.d[i] === t.d[i] && i--; )\n            ;\n      }\n      if (k)\n        r = r.times(2 << k - 1);\n      external = true;\n      return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\n    };\n    P.isFinite = function() {\n      return !!this.d;\n    };\n    P.isInteger = P.isInt = function() {\n      return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\n    };\n    P.isNaN = function() {\n      return !this.s;\n    };\n    P.isNegative = P.isNeg = function() {\n      return this.s < 0;\n    };\n    P.isPositive = P.isPos = function() {\n      return this.s > 0;\n    };\n    P.isZero = function() {\n      return !!this.d && this.d[0] === 0;\n    };\n    P.lessThan = P.lt = function(y) {\n      return this.cmp(y) < 0;\n    };\n    P.lessThanOrEqualTo = P.lte = function(y) {\n      return this.cmp(y) < 1;\n    };\n    P.logarithm = P.log = function(base) {\n      var isBase10, d, denominator, k, inf, num, sd, r, arg = this, Ctor = arg.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;\n      if (base == null) {\n        base = new Ctor(10);\n        isBase10 = true;\n      } else {\n        base = new Ctor(base);\n        d = base.d;\n        if (base.s < 0 || !d || !d[0] || base.eq(1))\n          return new Ctor(NaN);\n        isBase10 = base.eq(10);\n      }\n      d = arg.d;\n      if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\n        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\n      }\n      if (isBase10) {\n        if (d.length > 1) {\n          inf = true;\n        } else {\n          for (k = d[0]; k % 10 === 0; )\n            k /= 10;\n          inf = k !== 1;\n        }\n      }\n      external = false;\n      sd = pr + guard;\n      num = naturalLogarithm(arg, sd);\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n      r = divide(num, denominator, sd, 1);\n      if (checkRoundingDigits(r.d, k = pr, rm)) {\n        do {\n          sd += 10;\n          num = naturalLogarithm(arg, sd);\n          denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\n          r = divide(num, denominator, sd, 1);\n          if (!inf) {\n            if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\n              r = finalise(r, pr + 1, 0);\n            }\n            break;\n          }\n        } while (checkRoundingDigits(r.d, k += 10, rm));\n      }\n      external = true;\n      return finalise(r, pr, rm);\n    };\n    P.minus = P.sub = function(y) {\n      var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;\n      y = new Ctor(y);\n      if (!x.d || !y.d) {\n        if (!x.s || !y.s)\n          y = new Ctor(NaN);\n        else if (x.d)\n          y.s = -y.s;\n        else\n          y = new Ctor(y.d || x.s !== y.s ? x : NaN);\n        return y;\n      }\n      if (x.s != y.s) {\n        y.s = -y.s;\n        return x.plus(y);\n      }\n      xd = x.d;\n      yd = y.d;\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      if (!xd[0] || !yd[0]) {\n        if (yd[0])\n          y.s = -y.s;\n        else if (xd[0])\n          y = new Ctor(x);\n        else\n          return new Ctor(rm === 3 ? -0 : 0);\n        return external ? finalise(y, pr, rm) : y;\n      }\n      e = mathfloor(y.e / LOG_BASE);\n      xe = mathfloor(x.e / LOG_BASE);\n      xd = xd.slice();\n      k = xe - e;\n      if (k) {\n        xLTy = k < 0;\n        if (xLTy) {\n          d = xd;\n          k = -k;\n          len = yd.length;\n        } else {\n          d = yd;\n          e = xe;\n          len = xd.length;\n        }\n        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\n        if (k > i) {\n          k = i;\n          d.length = 1;\n        }\n        d.reverse();\n        for (i = k; i--; )\n          d.push(0);\n        d.reverse();\n      } else {\n        i = xd.length;\n        len = yd.length;\n        xLTy = i < len;\n        if (xLTy)\n          len = i;\n        for (i = 0; i < len; i++) {\n          if (xd[i] != yd[i]) {\n            xLTy = xd[i] < yd[i];\n            break;\n          }\n        }\n        k = 0;\n      }\n      if (xLTy) {\n        d = xd;\n        xd = yd;\n        yd = d;\n        y.s = -y.s;\n      }\n      len = xd.length;\n      for (i = yd.length - len; i > 0; --i)\n        xd[len++] = 0;\n      for (i = yd.length; i > k; ) {\n        if (xd[--i] < yd[i]) {\n          for (j = i; j && xd[--j] === 0; )\n            xd[j] = BASE - 1;\n          --xd[j];\n          xd[i] += BASE;\n        }\n        xd[i] -= yd[i];\n      }\n      for (; xd[--len] === 0; )\n        xd.pop();\n      for (; xd[0] === 0; xd.shift())\n        --e;\n      if (!xd[0])\n        return new Ctor(rm === 3 ? -0 : 0);\n      y.d = xd;\n      y.e = getBase10Exponent(xd, e);\n      return external ? finalise(y, pr, rm) : y;\n    };\n    P.modulo = P.mod = function(y) {\n      var q, x = this, Ctor = x.constructor;\n      y = new Ctor(y);\n      if (!x.d || !y.s || y.d && !y.d[0])\n        return new Ctor(NaN);\n      if (!y.d || x.d && !x.d[0]) {\n        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\n      }\n      external = false;\n      if (Ctor.modulo == 9) {\n        q = divide(x, y.abs(), 0, 3, 1);\n        q.s *= y.s;\n      } else {\n        q = divide(x, y, 0, Ctor.modulo, 1);\n      }\n      q = q.times(y);\n      external = true;\n      return x.minus(q);\n    };\n    P.naturalExponential = P.exp = function() {\n      return naturalExponential(this);\n    };\n    P.naturalLogarithm = P.ln = function() {\n      return naturalLogarithm(this);\n    };\n    P.negated = P.neg = function() {\n      var x = new this.constructor(this);\n      x.s = -x.s;\n      return finalise(x);\n    };\n    P.plus = P.add = function(y) {\n      var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;\n      y = new Ctor(y);\n      if (!x.d || !y.d) {\n        if (!x.s || !y.s)\n          y = new Ctor(NaN);\n        else if (!x.d)\n          y = new Ctor(y.d || x.s === y.s ? x : NaN);\n        return y;\n      }\n      if (x.s != y.s) {\n        y.s = -y.s;\n        return x.minus(y);\n      }\n      xd = x.d;\n      yd = y.d;\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      if (!xd[0] || !yd[0]) {\n        if (!yd[0])\n          y = new Ctor(x);\n        return external ? finalise(y, pr, rm) : y;\n      }\n      k = mathfloor(x.e / LOG_BASE);\n      e = mathfloor(y.e / LOG_BASE);\n      xd = xd.slice();\n      i = k - e;\n      if (i) {\n        if (i < 0) {\n          d = xd;\n          i = -i;\n          len = yd.length;\n        } else {\n          d = yd;\n          e = k;\n          len = xd.length;\n        }\n        k = Math.ceil(pr / LOG_BASE);\n        len = k > len ? k + 1 : len + 1;\n        if (i > len) {\n          i = len;\n          d.length = 1;\n        }\n        d.reverse();\n        for (; i--; )\n          d.push(0);\n        d.reverse();\n      }\n      len = xd.length;\n      i = yd.length;\n      if (len - i < 0) {\n        i = len;\n        d = yd;\n        yd = xd;\n        xd = d;\n      }\n      for (carry = 0; i; ) {\n        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\n        xd[i] %= BASE;\n      }\n      if (carry) {\n        xd.unshift(carry);\n        ++e;\n      }\n      for (len = xd.length; xd[--len] == 0; )\n        xd.pop();\n      y.d = xd;\n      y.e = getBase10Exponent(xd, e);\n      return external ? finalise(y, pr, rm) : y;\n    };\n    P.precision = P.sd = function(z) {\n      var k, x = this;\n      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)\n        throw Error(invalidArgument + z);\n      if (x.d) {\n        k = getPrecision(x.d);\n        if (z && x.e + 1 > k)\n          k = x.e + 1;\n      } else {\n        k = NaN;\n      }\n      return k;\n    };\n    P.round = function() {\n      var x = this, Ctor = x.constructor;\n      return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\n    };\n    P.sine = P.sin = function() {\n      var pr, rm, x = this, Ctor = x.constructor;\n      if (!x.isFinite())\n        return new Ctor(NaN);\n      if (x.isZero())\n        return new Ctor(x);\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\n      Ctor.rounding = 1;\n      x = sine(Ctor, toLessThanHalfPi(Ctor, x));\n      Ctor.precision = pr;\n      Ctor.rounding = rm;\n      return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\n    };\n    P.squareRoot = P.sqrt = function() {\n      var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;\n      if (s !== 1 || !d || !d[0]) {\n        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\n      }\n      external = false;\n      s = Math.sqrt(+x);\n      if (s == 0 || s == 1 / 0) {\n        n = digitsToString(d);\n        if ((n.length + e) % 2 == 0)\n          n += \"0\";\n        s = Math.sqrt(n);\n        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\n        if (s == 1 / 0) {\n          n = \"5e\" + e;\n        } else {\n          n = s.toExponential();\n          n = n.slice(0, n.indexOf(\"e\") + 1) + e;\n        }\n        r = new Ctor(n);\n      } else {\n        r = new Ctor(s.toString());\n      }\n      sd = (e = Ctor.precision) + 3;\n      for (; ; ) {\n        t = r;\n        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\n        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\n          n = n.slice(sd - 3, sd + 1);\n          if (n == \"9999\" || !rep && n == \"4999\") {\n            if (!rep) {\n              finalise(t, e + 1, 0);\n              if (t.times(t).eq(x)) {\n                r = t;\n                break;\n              }\n            }\n            sd += 4;\n            rep = 1;\n          } else {\n            if (!+n || !+n.slice(1) && n.charAt(0) == \"5\") {\n              finalise(r, e + 1, 1);\n              m = !r.times(r).eq(x);\n            }\n            break;\n          }\n        }\n      }\n      external = true;\n      return finalise(r, e, Ctor.rounding, m);\n    };\n    P.tangent = P.tan = function() {\n      var pr, rm, x = this, Ctor = x.constructor;\n      if (!x.isFinite())\n        return new Ctor(NaN);\n      if (x.isZero())\n        return new Ctor(x);\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      Ctor.precision = pr + 10;\n      Ctor.rounding = 1;\n      x = x.sin();\n      x.s = 1;\n      x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\n      Ctor.precision = pr;\n      Ctor.rounding = rm;\n      return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\n    };\n    P.times = P.mul = function(y) {\n      var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;\n      y.s *= x.s;\n      if (!xd || !xd[0] || !yd || !yd[0]) {\n        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);\n      }\n      e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\n      xdL = xd.length;\n      ydL = yd.length;\n      if (xdL < ydL) {\n        r = xd;\n        xd = yd;\n        yd = r;\n        rL = xdL;\n        xdL = ydL;\n        ydL = rL;\n      }\n      r = [];\n      rL = xdL + ydL;\n      for (i = rL; i--; )\n        r.push(0);\n      for (i = ydL; --i >= 0; ) {\n        carry = 0;\n        for (k = xdL + i; k > i; ) {\n          t = r[k] + yd[i] * xd[k - i - 1] + carry;\n          r[k--] = t % BASE | 0;\n          carry = t / BASE | 0;\n        }\n        r[k] = (r[k] + carry) % BASE | 0;\n      }\n      for (; !r[--rL]; )\n        r.pop();\n      if (carry)\n        ++e;\n      else\n        r.shift();\n      y.d = r;\n      y.e = getBase10Exponent(r, e);\n      return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\n    };\n    P.toBinary = function(sd, rm) {\n      return toStringBinary(this, 2, sd, rm);\n    };\n    P.toDecimalPlaces = P.toDP = function(dp, rm) {\n      var x = this, Ctor = x.constructor;\n      x = new Ctor(x);\n      if (dp === void 0)\n        return x;\n      checkInt32(dp, 0, MAX_DIGITS);\n      if (rm === void 0)\n        rm = Ctor.rounding;\n      else\n        checkInt32(rm, 0, 8);\n      return finalise(x, dp + x.e + 1, rm);\n    };\n    P.toExponential = function(dp, rm) {\n      var str, x = this, Ctor = x.constructor;\n      if (dp === void 0) {\n        str = finiteToString(x, true);\n      } else {\n        checkInt32(dp, 0, MAX_DIGITS);\n        if (rm === void 0)\n          rm = Ctor.rounding;\n        else\n          checkInt32(rm, 0, 8);\n        x = finalise(new Ctor(x), dp + 1, rm);\n        str = finiteToString(x, true, dp + 1);\n      }\n      return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n    };\n    P.toFixed = function(dp, rm) {\n      var str, y, x = this, Ctor = x.constructor;\n      if (dp === void 0) {\n        str = finiteToString(x);\n      } else {\n        checkInt32(dp, 0, MAX_DIGITS);\n        if (rm === void 0)\n          rm = Ctor.rounding;\n        else\n          checkInt32(rm, 0, 8);\n        y = finalise(new Ctor(x), dp + x.e + 1, rm);\n        str = finiteToString(y, false, dp + y.e + 1);\n      }\n      return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n    };\n    P.toFraction = function(maxD) {\n      var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;\n      if (!xd)\n        return new Ctor(x);\n      n1 = d0 = new Ctor(1);\n      d1 = n0 = new Ctor(0);\n      d = new Ctor(d1);\n      e = d.e = getPrecision(xd) - x.e - 1;\n      k = e % LOG_BASE;\n      d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\n      if (maxD == null) {\n        maxD = e > 0 ? d : n1;\n      } else {\n        n = new Ctor(maxD);\n        if (!n.isInt() || n.lt(n1))\n          throw Error(invalidArgument + n);\n        maxD = n.gt(d) ? e > 0 ? d : n1 : n;\n      }\n      external = false;\n      n = new Ctor(digitsToString(xd));\n      pr = Ctor.precision;\n      Ctor.precision = e = xd.length * LOG_BASE * 2;\n      for (; ; ) {\n        q = divide(n, d, 0, 1, 1);\n        d2 = d0.plus(q.times(d1));\n        if (d2.cmp(maxD) == 1)\n          break;\n        d0 = d1;\n        d1 = d2;\n        d2 = n1;\n        n1 = n0.plus(q.times(d2));\n        n0 = d2;\n        d2 = d;\n        d = n.minus(q.times(d2));\n        n = d2;\n      }\n      d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\n      n0 = n0.plus(d2.times(n1));\n      d0 = d0.plus(d2.times(d1));\n      n0.s = n1.s = x.s;\n      r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\n      Ctor.precision = pr;\n      external = true;\n      return r;\n    };\n    P.toHexadecimal = P.toHex = function(sd, rm) {\n      return toStringBinary(this, 16, sd, rm);\n    };\n    P.toNearest = function(y, rm) {\n      var x = this, Ctor = x.constructor;\n      x = new Ctor(x);\n      if (y == null) {\n        if (!x.d)\n          return x;\n        y = new Ctor(1);\n        rm = Ctor.rounding;\n      } else {\n        y = new Ctor(y);\n        if (rm === void 0) {\n          rm = Ctor.rounding;\n        } else {\n          checkInt32(rm, 0, 8);\n        }\n        if (!x.d)\n          return y.s ? x : y;\n        if (!y.d) {\n          if (y.s)\n            y.s = x.s;\n          return y;\n        }\n      }\n      if (y.d[0]) {\n        external = false;\n        x = divide(x, y, 0, rm, 1).times(y);\n        external = true;\n        finalise(x);\n      } else {\n        y.s = x.s;\n        x = y;\n      }\n      return x;\n    };\n    P.toNumber = function() {\n      return +this;\n    };\n    P.toOctal = function(sd, rm) {\n      return toStringBinary(this, 8, sd, rm);\n    };\n    P.toPower = P.pow = function(y) {\n      var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));\n      if (!x.d || !y.d || !x.d[0] || !y.d[0])\n        return new Ctor(mathpow(+x, yn));\n      x = new Ctor(x);\n      if (x.eq(1))\n        return x;\n      pr = Ctor.precision;\n      rm = Ctor.rounding;\n      if (y.eq(1))\n        return finalise(x, pr, rm);\n      e = mathfloor(y.e / LOG_BASE);\n      if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\n        r = intPow(Ctor, x, k, pr);\n        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\n      }\n      s = x.s;\n      if (s < 0) {\n        if (e < y.d.length - 1)\n          return new Ctor(NaN);\n        if ((y.d[e] & 1) == 0)\n          s = 1;\n        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\n          x.s = s;\n          return x;\n        }\n      }\n      k = mathpow(+x, yn);\n      e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log(\"0.\" + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + \"\").e;\n      if (e > Ctor.maxE + 1 || e < Ctor.minE - 1)\n        return new Ctor(e > 0 ? s / 0 : 0);\n      external = false;\n      Ctor.rounding = x.s = 1;\n      k = Math.min(12, (e + \"\").length);\n      r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\n      if (r.d) {\n        r = finalise(r, pr + 5, 1);\n        if (checkRoundingDigits(r.d, pr, rm)) {\n          e = pr + 10;\n          r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\n          if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\n            r = finalise(r, pr + 1, 0);\n          }\n        }\n      }\n      r.s = s;\n      external = true;\n      Ctor.rounding = rm;\n      return finalise(r, pr, rm);\n    };\n    P.toPrecision = function(sd, rm) {\n      var str, x = this, Ctor = x.constructor;\n      if (sd === void 0) {\n        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n      } else {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0)\n          rm = Ctor.rounding;\n        else\n          checkInt32(rm, 0, 8);\n        x = finalise(new Ctor(x), sd, rm);\n        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\n      }\n      return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n    };\n    P.toSignificantDigits = P.toSD = function(sd, rm) {\n      var x = this, Ctor = x.constructor;\n      if (sd === void 0) {\n        sd = Ctor.precision;\n        rm = Ctor.rounding;\n      } else {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0)\n          rm = Ctor.rounding;\n        else\n          checkInt32(rm, 0, 8);\n      }\n      return finalise(new Ctor(x), sd, rm);\n    };\n    P.toString = function() {\n      var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n      return x.isNeg() && !x.isZero() ? \"-\" + str : str;\n    };\n    P.truncated = P.trunc = function() {\n      return finalise(new this.constructor(this), this.e + 1, 1);\n    };\n    P.valueOf = P.toJSON = function() {\n      var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\n      return x.isNeg() ? \"-\" + str : str;\n    };\n    function digitsToString(d) {\n      var i, k, ws, indexOfLastWord = d.length - 1, str = \"\", w = d[0];\n      if (indexOfLastWord > 0) {\n        str += w;\n        for (i = 1; i < indexOfLastWord; i++) {\n          ws = d[i] + \"\";\n          k = LOG_BASE - ws.length;\n          if (k)\n            str += getZeroString(k);\n          str += ws;\n        }\n        w = d[i];\n        ws = w + \"\";\n        k = LOG_BASE - ws.length;\n        if (k)\n          str += getZeroString(k);\n      } else if (w === 0) {\n        return \"0\";\n      }\n      for (; w % 10 === 0; )\n        w /= 10;\n      return str + w;\n    }\n    function checkInt32(i, min2, max2) {\n      if (i !== ~~i || i < min2 || i > max2) {\n        throw Error(invalidArgument + i);\n      }\n    }\n    function checkRoundingDigits(d, i, rm, repeating) {\n      var di, k, r, rd;\n      for (k = d[0]; k >= 10; k /= 10)\n        --i;\n      if (--i < 0) {\n        i += LOG_BASE;\n        di = 0;\n      } else {\n        di = Math.ceil((i + 1) / LOG_BASE);\n        i %= LOG_BASE;\n      }\n      k = mathpow(10, LOG_BASE - i);\n      rd = d[di] % k | 0;\n      if (repeating == null) {\n        if (i < 3) {\n          if (i == 0)\n            rd = rd / 100 | 0;\n          else if (i == 1)\n            rd = rd / 10 | 0;\n          r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 5e4 || rd == 0;\n        } else {\n          r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\n        }\n      } else {\n        if (i < 4) {\n          if (i == 0)\n            rd = rd / 1e3 | 0;\n          else if (i == 1)\n            rd = rd / 100 | 0;\n          else if (i == 2)\n            rd = rd / 10 | 0;\n          r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\n        } else {\n          r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1e3 | 0) == mathpow(10, i - 3) - 1;\n        }\n      }\n      return r;\n    }\n    function convertBase(str, baseIn, baseOut) {\n      var j, arr = [0], arrL, i = 0, strL = str.length;\n      for (; i < strL; ) {\n        for (arrL = arr.length; arrL--; )\n          arr[arrL] *= baseIn;\n        arr[0] += NUMERALS.indexOf(str.charAt(i++));\n        for (j = 0; j < arr.length; j++) {\n          if (arr[j] > baseOut - 1) {\n            if (arr[j + 1] === void 0)\n              arr[j + 1] = 0;\n            arr[j + 1] += arr[j] / baseOut | 0;\n            arr[j] %= baseOut;\n          }\n        }\n      }\n      return arr.reverse();\n    }\n    function cosine(Ctor, x) {\n      var k, y, len = x.d.length;\n      if (len < 32) {\n        k = Math.ceil(len / 3);\n        y = (1 / tinyPow(4, k)).toString();\n      } else {\n        k = 16;\n        y = \"2.3283064365386962890625e-10\";\n      }\n      Ctor.precision += k;\n      x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\n      for (var i = k; i--; ) {\n        var cos2x = x.times(x);\n        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\n      }\n      Ctor.precision -= k;\n      return x;\n    }\n    var divide = function() {\n      function multiplyInteger(x, k, base) {\n        var temp, carry = 0, i = x.length;\n        for (x = x.slice(); i--; ) {\n          temp = x[i] * k + carry;\n          x[i] = temp % base | 0;\n          carry = temp / base | 0;\n        }\n        if (carry)\n          x.unshift(carry);\n        return x;\n      }\n      function compare(a, b, aL, bL) {\n        var i, r;\n        if (aL != bL) {\n          r = aL > bL ? 1 : -1;\n        } else {\n          for (i = r = 0; i < aL; i++) {\n            if (a[i] != b[i]) {\n              r = a[i] > b[i] ? 1 : -1;\n              break;\n            }\n          }\n        }\n        return r;\n      }\n      function subtract(a, b, aL, base) {\n        var i = 0;\n        for (; aL--; ) {\n          a[aL] -= i;\n          i = a[aL] < b[aL] ? 1 : 0;\n          a[aL] = i * base + a[aL] - b[aL];\n        }\n        for (; !a[0] && a.length > 1; )\n          a.shift();\n      }\n      return function(x, y, pr, rm, dp, base) {\n        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign2 = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;\n        if (!xd || !xd[0] || !yd || !yd[0]) {\n          return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : xd && xd[0] == 0 || !yd ? sign2 * 0 : sign2 / 0);\n        }\n        if (base) {\n          logBase = 1;\n          e = x.e - y.e;\n        } else {\n          base = BASE;\n          logBase = LOG_BASE;\n          e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\n        }\n        yL = yd.length;\n        xL = xd.length;\n        q = new Ctor(sign2);\n        qd = q.d = [];\n        for (i = 0; yd[i] == (xd[i] || 0); i++)\n          ;\n        if (yd[i] > (xd[i] || 0))\n          e--;\n        if (pr == null) {\n          sd = pr = Ctor.precision;\n          rm = Ctor.rounding;\n        } else if (dp) {\n          sd = pr + (x.e - y.e) + 1;\n        } else {\n          sd = pr;\n        }\n        if (sd < 0) {\n          qd.push(1);\n          more = true;\n        } else {\n          sd = sd / logBase + 2 | 0;\n          i = 0;\n          if (yL == 1) {\n            k = 0;\n            yd = yd[0];\n            sd++;\n            for (; (i < xL || k) && sd--; i++) {\n              t = k * base + (xd[i] || 0);\n              qd[i] = t / yd | 0;\n              k = t % yd | 0;\n            }\n            more = k || i < xL;\n          } else {\n            k = base / (yd[0] + 1) | 0;\n            if (k > 1) {\n              yd = multiplyInteger(yd, k, base);\n              xd = multiplyInteger(xd, k, base);\n              yL = yd.length;\n              xL = xd.length;\n            }\n            xi = yL;\n            rem = xd.slice(0, yL);\n            remL = rem.length;\n            for (; remL < yL; )\n              rem[remL++] = 0;\n            yz = yd.slice();\n            yz.unshift(0);\n            yd0 = yd[0];\n            if (yd[1] >= base / 2)\n              ++yd0;\n            do {\n              k = 0;\n              cmp = compare(yd, rem, yL, remL);\n              if (cmp < 0) {\n                rem0 = rem[0];\n                if (yL != remL)\n                  rem0 = rem0 * base + (rem[1] || 0);\n                k = rem0 / yd0 | 0;\n                if (k > 1) {\n                  if (k >= base)\n                    k = base - 1;\n                  prod = multiplyInteger(yd, k, base);\n                  prodL = prod.length;\n                  remL = rem.length;\n                  cmp = compare(prod, rem, prodL, remL);\n                  if (cmp == 1) {\n                    k--;\n                    subtract(prod, yL < prodL ? yz : yd, prodL, base);\n                  }\n                } else {\n                  if (k == 0)\n                    cmp = k = 1;\n                  prod = yd.slice();\n                }\n                prodL = prod.length;\n                if (prodL < remL)\n                  prod.unshift(0);\n                subtract(rem, prod, remL, base);\n                if (cmp == -1) {\n                  remL = rem.length;\n                  cmp = compare(yd, rem, yL, remL);\n                  if (cmp < 1) {\n                    k++;\n                    subtract(rem, yL < remL ? yz : yd, remL, base);\n                  }\n                }\n                remL = rem.length;\n              } else if (cmp === 0) {\n                k++;\n                rem = [0];\n              }\n              qd[i++] = k;\n              if (cmp && rem[0]) {\n                rem[remL++] = xd[xi] || 0;\n              } else {\n                rem = [xd[xi]];\n                remL = 1;\n              }\n            } while ((xi++ < xL || rem[0] !== void 0) && sd--);\n            more = rem[0] !== void 0;\n          }\n          if (!qd[0])\n            qd.shift();\n        }\n        if (logBase == 1) {\n          q.e = e;\n          inexact = more;\n        } else {\n          for (i = 1, k = qd[0]; k >= 10; k /= 10)\n            i++;\n          q.e = i + e * logBase - 1;\n          finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\n        }\n        return q;\n      };\n    }();\n    function finalise(x, sd, rm, isTruncated) {\n      var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;\n      out:\n        if (sd != null) {\n          xd = x.d;\n          if (!xd)\n            return x;\n          for (digits = 1, k = xd[0]; k >= 10; k /= 10)\n            digits++;\n          i = sd - digits;\n          if (i < 0) {\n            i += LOG_BASE;\n            j = sd;\n            w = xd[xdi = 0];\n            rd = w / mathpow(10, digits - j - 1) % 10 | 0;\n          } else {\n            xdi = Math.ceil((i + 1) / LOG_BASE);\n            k = xd.length;\n            if (xdi >= k) {\n              if (isTruncated) {\n                for (; k++ <= xdi; )\n                  xd.push(0);\n                w = rd = 0;\n                digits = 1;\n                i %= LOG_BASE;\n                j = i - LOG_BASE + 1;\n              } else {\n                break out;\n              }\n            } else {\n              w = k = xd[xdi];\n              for (digits = 1; k >= 10; k /= 10)\n                digits++;\n              i %= LOG_BASE;\n              j = i - LOG_BASE + digits;\n              rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\n            }\n          }\n          isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\n          roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n          if (sd < 1 || !xd[0]) {\n            xd.length = 0;\n            if (roundUp) {\n              sd -= x.e + 1;\n              xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\n              x.e = -sd || 0;\n            } else {\n              xd[0] = x.e = 0;\n            }\n            return x;\n          }\n          if (i == 0) {\n            xd.length = xdi;\n            k = 1;\n            xdi--;\n          } else {\n            xd.length = xdi + 1;\n            k = mathpow(10, LOG_BASE - i);\n            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\n          }\n          if (roundUp) {\n            for (; ; ) {\n              if (xdi == 0) {\n                for (i = 1, j = xd[0]; j >= 10; j /= 10)\n                  i++;\n                j = xd[0] += k;\n                for (k = 1; j >= 10; j /= 10)\n                  k++;\n                if (i != k) {\n                  x.e++;\n                  if (xd[0] == BASE)\n                    xd[0] = 1;\n                }\n                break;\n              } else {\n                xd[xdi] += k;\n                if (xd[xdi] != BASE)\n                  break;\n                xd[xdi--] = 0;\n                k = 1;\n              }\n            }\n          }\n          for (i = xd.length; xd[--i] === 0; )\n            xd.pop();\n        }\n      if (external) {\n        if (x.e > Ctor.maxE) {\n          x.d = null;\n          x.e = NaN;\n        } else if (x.e < Ctor.minE) {\n          x.e = 0;\n          x.d = [0];\n        }\n      }\n      return x;\n    }\n    function finiteToString(x, isExp, sd) {\n      if (!x.isFinite())\n        return nonFiniteToString(x);\n      var k, e = x.e, str = digitsToString(x.d), len = str.length;\n      if (isExp) {\n        if (sd && (k = sd - len) > 0) {\n          str = str.charAt(0) + \".\" + str.slice(1) + getZeroString(k);\n        } else if (len > 1) {\n          str = str.charAt(0) + \".\" + str.slice(1);\n        }\n        str = str + (x.e < 0 ? \"e\" : \"e+\") + x.e;\n      } else if (e < 0) {\n        str = \"0.\" + getZeroString(-e - 1) + str;\n        if (sd && (k = sd - len) > 0)\n          str += getZeroString(k);\n      } else if (e >= len) {\n        str += getZeroString(e + 1 - len);\n        if (sd && (k = sd - e - 1) > 0)\n          str = str + \".\" + getZeroString(k);\n      } else {\n        if ((k = e + 1) < len)\n          str = str.slice(0, k) + \".\" + str.slice(k);\n        if (sd && (k = sd - len) > 0) {\n          if (e + 1 === len)\n            str += \".\";\n          str += getZeroString(k);\n        }\n      }\n      return str;\n    }\n    function getBase10Exponent(digits, e) {\n      var w = digits[0];\n      for (e *= LOG_BASE; w >= 10; w /= 10)\n        e++;\n      return e;\n    }\n    function getLn10(Ctor, sd, pr) {\n      if (sd > LN10_PRECISION) {\n        external = true;\n        if (pr)\n          Ctor.precision = pr;\n        throw Error(precisionLimitExceeded);\n      }\n      return finalise(new Ctor(LN10), sd, 1, true);\n    }\n    function getPi(Ctor, sd, rm) {\n      if (sd > PI_PRECISION)\n        throw Error(precisionLimitExceeded);\n      return finalise(new Ctor(PI), sd, rm, true);\n    }\n    function getPrecision(digits) {\n      var w = digits.length - 1, len = w * LOG_BASE + 1;\n      w = digits[w];\n      if (w) {\n        for (; w % 10 == 0; w /= 10)\n          len--;\n        for (w = digits[0]; w >= 10; w /= 10)\n          len++;\n      }\n      return len;\n    }\n    function getZeroString(k) {\n      var zs = \"\";\n      for (; k--; )\n        zs += \"0\";\n      return zs;\n    }\n    function intPow(Ctor, x, n, pr) {\n      var isTruncated, r = new Ctor(1), k = Math.ceil(pr / LOG_BASE + 4);\n      external = false;\n      for (; ; ) {\n        if (n % 2) {\n          r = r.times(x);\n          if (truncate(r.d, k))\n            isTruncated = true;\n        }\n        n = mathfloor(n / 2);\n        if (n === 0) {\n          n = r.d.length - 1;\n          if (isTruncated && r.d[n] === 0)\n            ++r.d[n];\n          break;\n        }\n        x = x.times(x);\n        truncate(x.d, k);\n      }\n      external = true;\n      return r;\n    }\n    function isOdd(n) {\n      return n.d[n.d.length - 1] & 1;\n    }\n    function maxOrMin(Ctor, args, ltgt) {\n      var y, x = new Ctor(args[0]), i = 0;\n      for (; ++i < args.length; ) {\n        y = new Ctor(args[i]);\n        if (!y.s) {\n          x = y;\n          break;\n        } else if (x[ltgt](y)) {\n          x = y;\n        }\n      }\n      return x;\n    }\n    function naturalExponential(x, sd) {\n      var denominator, guard, j, pow2, sum, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n      if (!x.d || !x.d[0] || x.e > 17) {\n        return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);\n      }\n      if (sd == null) {\n        external = false;\n        wpr = pr;\n      } else {\n        wpr = sd;\n      }\n      t = new Ctor(0.03125);\n      while (x.e > -2) {\n        x = x.times(t);\n        k += 5;\n      }\n      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\n      wpr += guard;\n      denominator = pow2 = sum = new Ctor(1);\n      Ctor.precision = wpr;\n      for (; ; ) {\n        pow2 = finalise(pow2.times(x), wpr, 1);\n        denominator = denominator.times(++i);\n        t = sum.plus(divide(pow2, denominator, wpr, 1));\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n          j = k;\n          while (j--)\n            sum = finalise(sum.times(sum), wpr, 1);\n          if (sd == null) {\n            if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n              Ctor.precision = wpr += 10;\n              denominator = pow2 = t = new Ctor(1);\n              i = 0;\n              rep++;\n            } else {\n              return finalise(sum, Ctor.precision = pr, rm, external = true);\n            }\n          } else {\n            Ctor.precision = pr;\n            return sum;\n          }\n        }\n        sum = t;\n      }\n    }\n    function naturalLogarithm(y, sd) {\n      var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;\n      if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\n        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\n      }\n      if (sd == null) {\n        external = false;\n        wpr = pr;\n      } else {\n        wpr = sd;\n      }\n      Ctor.precision = wpr += guard;\n      c = digitsToString(xd);\n      c0 = c.charAt(0);\n      if (Math.abs(e = x.e) < 15e14) {\n        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\n          x = x.times(y);\n          c = digitsToString(x.d);\n          c0 = c.charAt(0);\n          n++;\n        }\n        e = x.e;\n        if (c0 > 1) {\n          x = new Ctor(\"0.\" + c);\n          e++;\n        } else {\n          x = new Ctor(c0 + \".\" + c.slice(1));\n        }\n      } else {\n        t = getLn10(Ctor, wpr + 2, pr).times(e + \"\");\n        x = naturalLogarithm(new Ctor(c0 + \".\" + c.slice(1)), wpr - guard).plus(t);\n        Ctor.precision = pr;\n        return sd == null ? finalise(x, pr, rm, external = true) : x;\n      }\n      x1 = x;\n      sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\n      x2 = finalise(x.times(x), wpr, 1);\n      denominator = 3;\n      for (; ; ) {\n        numerator = finalise(numerator.times(x2), wpr, 1);\n        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\n        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\n          sum = sum.times(2);\n          if (e !== 0)\n            sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + \"\"));\n          sum = divide(sum, new Ctor(n), wpr, 1);\n          if (sd == null) {\n            if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\n              Ctor.precision = wpr += guard;\n              t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\n              x2 = finalise(x.times(x), wpr, 1);\n              denominator = rep = 1;\n            } else {\n              return finalise(sum, Ctor.precision = pr, rm, external = true);\n            }\n          } else {\n            Ctor.precision = pr;\n            return sum;\n          }\n        }\n        sum = t;\n        denominator += 2;\n      }\n    }\n    function nonFiniteToString(x) {\n      return String(x.s * x.s / 0);\n    }\n    function parseDecimal(x, str) {\n      var e, i, len;\n      if ((e = str.indexOf(\".\")) > -1)\n        str = str.replace(\".\", \"\");\n      if ((i = str.search(/e/i)) > 0) {\n        if (e < 0)\n          e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n      } else if (e < 0) {\n        e = str.length;\n      }\n      for (i = 0; str.charCodeAt(i) === 48; i++)\n        ;\n      for (len = str.length; str.charCodeAt(len - 1) === 48; --len)\n        ;\n      str = str.slice(i, len);\n      if (str) {\n        len -= i;\n        x.e = e = e - i - 1;\n        x.d = [];\n        i = (e + 1) % LOG_BASE;\n        if (e < 0)\n          i += LOG_BASE;\n        if (i < len) {\n          if (i)\n            x.d.push(+str.slice(0, i));\n          for (len -= LOG_BASE; i < len; )\n            x.d.push(+str.slice(i, i += LOG_BASE));\n          str = str.slice(i);\n          i = LOG_BASE - str.length;\n        } else {\n          i -= len;\n        }\n        for (; i--; )\n          str += \"0\";\n        x.d.push(+str);\n        if (external) {\n          if (x.e > x.constructor.maxE) {\n            x.d = null;\n            x.e = NaN;\n          } else if (x.e < x.constructor.minE) {\n            x.e = 0;\n            x.d = [0];\n          }\n        }\n      } else {\n        x.e = 0;\n        x.d = [0];\n      }\n      return x;\n    }\n    function parseOther(x, str) {\n      var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\n      if (str === \"Infinity\" || str === \"NaN\") {\n        if (!+str)\n          x.s = NaN;\n        x.e = NaN;\n        x.d = null;\n        return x;\n      }\n      if (isHex.test(str)) {\n        base = 16;\n        str = str.toLowerCase();\n      } else if (isBinary.test(str)) {\n        base = 2;\n      } else if (isOctal.test(str)) {\n        base = 8;\n      } else {\n        throw Error(invalidArgument + str);\n      }\n      i = str.search(/p/i);\n      if (i > 0) {\n        p = +str.slice(i + 1);\n        str = str.substring(2, i);\n      } else {\n        str = str.slice(2);\n      }\n      i = str.indexOf(\".\");\n      isFloat = i >= 0;\n      Ctor = x.constructor;\n      if (isFloat) {\n        str = str.replace(\".\", \"\");\n        len = str.length;\n        i = len - i;\n        divisor = intPow(Ctor, new Ctor(base), i, i * 2);\n      }\n      xd = convertBase(str, base, BASE);\n      xe = xd.length - 1;\n      for (i = xe; xd[i] === 0; --i)\n        xd.pop();\n      if (i < 0)\n        return new Ctor(x.s * 0);\n      x.e = getBase10Exponent(xd, xe);\n      x.d = xd;\n      external = false;\n      if (isFloat)\n        x = divide(x, divisor, len * 4);\n      if (p)\n        x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\n      external = true;\n      return x;\n    }\n    function sine(Ctor, x) {\n      var k, len = x.d.length;\n      if (len < 3)\n        return taylorSeries(Ctor, 2, x, x);\n      k = 1.4 * Math.sqrt(len);\n      k = k > 16 ? 16 : k | 0;\n      x = x.times(1 / tinyPow(5, k));\n      x = taylorSeries(Ctor, 2, x, x);\n      var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);\n      for (; k--; ) {\n        sin2_x = x.times(x);\n        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\n      }\n      return x;\n    }\n    function taylorSeries(Ctor, n, x, y, isHyperbolic) {\n      var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);\n      external = false;\n      x2 = x.times(x);\n      u = new Ctor(y);\n      for (; ; ) {\n        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\n        u = isHyperbolic ? y.plus(t) : y.minus(t);\n        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\n        t = u.plus(y);\n        if (t.d[k] !== void 0) {\n          for (j = k; t.d[j] === u.d[j] && j--; )\n            ;\n          if (j == -1)\n            break;\n        }\n        j = u;\n        u = y;\n        y = t;\n        t = j;\n        i++;\n      }\n      external = true;\n      t.d.length = k + 1;\n      return t;\n    }\n    function tinyPow(b, e) {\n      var n = b;\n      while (--e)\n        n *= b;\n      return n;\n    }\n    function toLessThanHalfPi(Ctor, x) {\n      var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);\n      x = x.abs();\n      if (x.lte(halfPi)) {\n        quadrant = isNeg ? 4 : 1;\n        return x;\n      }\n      t = x.divToInt(pi);\n      if (t.isZero()) {\n        quadrant = isNeg ? 3 : 2;\n      } else {\n        x = x.minus(t.times(pi));\n        if (x.lte(halfPi)) {\n          quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;\n          return x;\n        }\n        quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;\n      }\n      return x.minus(pi).abs();\n    }\n    function toStringBinary(x, baseOut, sd, rm) {\n      var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;\n      if (isExp) {\n        checkInt32(sd, 1, MAX_DIGITS);\n        if (rm === void 0)\n          rm = Ctor.rounding;\n        else\n          checkInt32(rm, 0, 8);\n      } else {\n        sd = Ctor.precision;\n        rm = Ctor.rounding;\n      }\n      if (!x.isFinite()) {\n        str = nonFiniteToString(x);\n      } else {\n        str = finiteToString(x);\n        i = str.indexOf(\".\");\n        if (isExp) {\n          base = 2;\n          if (baseOut == 16) {\n            sd = sd * 4 - 3;\n          } else if (baseOut == 8) {\n            sd = sd * 3 - 2;\n          }\n        } else {\n          base = baseOut;\n        }\n        if (i >= 0) {\n          str = str.replace(\".\", \"\");\n          y = new Ctor(1);\n          y.e = str.length - i;\n          y.d = convertBase(finiteToString(y), 10, base);\n          y.e = y.d.length;\n        }\n        xd = convertBase(str, 10, base);\n        e = len = xd.length;\n        for (; xd[--len] == 0; )\n          xd.pop();\n        if (!xd[0]) {\n          str = isExp ? \"0p+0\" : \"0\";\n        } else {\n          if (i < 0) {\n            e--;\n          } else {\n            x = new Ctor(x);\n            x.d = xd;\n            x.e = e;\n            x = divide(x, y, sd, rm, 0, base);\n            xd = x.d;\n            e = x.e;\n            roundUp = inexact;\n          }\n          i = xd[sd];\n          k = base / 2;\n          roundUp = roundUp || xd[sd + 1] !== void 0;\n          roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));\n          xd.length = sd;\n          if (roundUp) {\n            for (; ++xd[--sd] > base - 1; ) {\n              xd[sd] = 0;\n              if (!sd) {\n                ++e;\n                xd.unshift(1);\n              }\n            }\n          }\n          for (len = xd.length; !xd[len - 1]; --len)\n            ;\n          for (i = 0, str = \"\"; i < len; i++)\n            str += NUMERALS.charAt(xd[i]);\n          if (isExp) {\n            if (len > 1) {\n              if (baseOut == 16 || baseOut == 8) {\n                i = baseOut == 16 ? 4 : 3;\n                for (--len; len % i; len++)\n                  str += \"0\";\n                xd = convertBase(str, base, baseOut);\n                for (len = xd.length; !xd[len - 1]; --len)\n                  ;\n                for (i = 1, str = \"1.\"; i < len; i++)\n                  str += NUMERALS.charAt(xd[i]);\n              } else {\n                str = str.charAt(0) + \".\" + str.slice(1);\n              }\n            }\n            str = str + (e < 0 ? \"p\" : \"p+\") + e;\n          } else if (e < 0) {\n            for (; ++e; )\n              str = \"0\" + str;\n            str = \"0.\" + str;\n          } else {\n            if (++e > len)\n              for (e -= len; e--; )\n                str += \"0\";\n            else if (e < len)\n              str = str.slice(0, e) + \".\" + str.slice(e);\n          }\n        }\n        str = (baseOut == 16 ? \"0x\" : baseOut == 2 ? \"0b\" : baseOut == 8 ? \"0o\" : \"\") + str;\n      }\n      return x.s < 0 ? \"-\" + str : str;\n    }\n    function truncate(arr, len) {\n      if (arr.length > len) {\n        arr.length = len;\n        return true;\n      }\n    }\n    function abs(x) {\n      return new this(x).abs();\n    }\n    function acos(x) {\n      return new this(x).acos();\n    }\n    function acosh(x) {\n      return new this(x).acosh();\n    }\n    function add(x, y) {\n      return new this(x).plus(y);\n    }\n    function asin(x) {\n      return new this(x).asin();\n    }\n    function asinh(x) {\n      return new this(x).asinh();\n    }\n    function atan(x) {\n      return new this(x).atan();\n    }\n    function atanh(x) {\n      return new this(x).atanh();\n    }\n    function atan2(y, x) {\n      y = new this(y);\n      x = new this(x);\n      var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;\n      if (!y.s || !x.s) {\n        r = new this(NaN);\n      } else if (!y.d && !x.d) {\n        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\n        r.s = y.s;\n      } else if (!x.d || y.isZero()) {\n        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\n        r.s = y.s;\n      } else if (!y.d || x.isZero()) {\n        r = getPi(this, wpr, 1).times(0.5);\n        r.s = y.s;\n      } else if (x.s < 0) {\n        this.precision = wpr;\n        this.rounding = 1;\n        r = this.atan(divide(y, x, wpr, 1));\n        x = getPi(this, wpr, 1);\n        this.precision = pr;\n        this.rounding = rm;\n        r = y.s < 0 ? r.minus(x) : r.plus(x);\n      } else {\n        r = this.atan(divide(y, x, wpr, 1));\n      }\n      return r;\n    }\n    function cbrt(x) {\n      return new this(x).cbrt();\n    }\n    function ceil(x) {\n      return finalise(x = new this(x), x.e + 1, 2);\n    }\n    function config(obj) {\n      if (!obj || typeof obj !== \"object\")\n        throw Error(decimalError + \"Object expected\");\n      var i, p, v, useDefaults = obj.defaults === true, ps = [\n        \"precision\",\n        1,\n        MAX_DIGITS,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -EXP_LIMIT,\n        0,\n        \"toExpPos\",\n        0,\n        EXP_LIMIT,\n        \"maxE\",\n        0,\n        EXP_LIMIT,\n        \"minE\",\n        -EXP_LIMIT,\n        0,\n        \"modulo\",\n        0,\n        9\n      ];\n      for (i = 0; i < ps.length; i += 3) {\n        if (p = ps[i], useDefaults)\n          this[p] = DEFAULTS[p];\n        if ((v = obj[p]) !== void 0) {\n          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2])\n            this[p] = v;\n          else\n            throw Error(invalidArgument + p + \": \" + v);\n        }\n      }\n      if (p = \"crypto\", useDefaults)\n        this[p] = DEFAULTS[p];\n      if ((v = obj[p]) !== void 0) {\n        if (v === true || v === false || v === 0 || v === 1) {\n          if (v) {\n            if (typeof crypto != \"undefined\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n              this[p] = true;\n            } else {\n              throw Error(cryptoUnavailable);\n            }\n          } else {\n            this[p] = false;\n          }\n        } else {\n          throw Error(invalidArgument + p + \": \" + v);\n        }\n      }\n      return this;\n    }\n    function cos(x) {\n      return new this(x).cos();\n    }\n    function cosh(x) {\n      return new this(x).cosh();\n    }\n    function clone(obj) {\n      var i, p, ps;\n      function Decimal2(v) {\n        var e, i2, t, x = this;\n        if (!(x instanceof Decimal2))\n          return new Decimal2(v);\n        x.constructor = Decimal2;\n        if (v instanceof Decimal2) {\n          x.s = v.s;\n          if (external) {\n            if (!v.d || v.e > Decimal2.maxE) {\n              x.e = NaN;\n              x.d = null;\n            } else if (v.e < Decimal2.minE) {\n              x.e = 0;\n              x.d = [0];\n            } else {\n              x.e = v.e;\n              x.d = v.d.slice();\n            }\n          } else {\n            x.e = v.e;\n            x.d = v.d ? v.d.slice() : v.d;\n          }\n          return;\n        }\n        t = typeof v;\n        if (t === \"number\") {\n          if (v === 0) {\n            x.s = 1 / v < 0 ? -1 : 1;\n            x.e = 0;\n            x.d = [0];\n            return;\n          }\n          if (v < 0) {\n            v = -v;\n            x.s = -1;\n          } else {\n            x.s = 1;\n          }\n          if (v === ~~v && v < 1e7) {\n            for (e = 0, i2 = v; i2 >= 10; i2 /= 10)\n              e++;\n            if (external) {\n              if (e > Decimal2.maxE) {\n                x.e = NaN;\n                x.d = null;\n              } else if (e < Decimal2.minE) {\n                x.e = 0;\n                x.d = [0];\n              } else {\n                x.e = e;\n                x.d = [v];\n              }\n            } else {\n              x.e = e;\n              x.d = [v];\n            }\n            return;\n          } else if (v * 0 !== 0) {\n            if (!v)\n              x.s = NaN;\n            x.e = NaN;\n            x.d = null;\n            return;\n          }\n          return parseDecimal(x, v.toString());\n        } else if (t !== \"string\") {\n          throw Error(invalidArgument + v);\n        }\n        if ((i2 = v.charCodeAt(0)) === 45) {\n          v = v.slice(1);\n          x.s = -1;\n        } else {\n          if (i2 === 43)\n            v = v.slice(1);\n          x.s = 1;\n        }\n        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\n      }\n      Decimal2.prototype = P;\n      Decimal2.ROUND_UP = 0;\n      Decimal2.ROUND_DOWN = 1;\n      Decimal2.ROUND_CEIL = 2;\n      Decimal2.ROUND_FLOOR = 3;\n      Decimal2.ROUND_HALF_UP = 4;\n      Decimal2.ROUND_HALF_DOWN = 5;\n      Decimal2.ROUND_HALF_EVEN = 6;\n      Decimal2.ROUND_HALF_CEIL = 7;\n      Decimal2.ROUND_HALF_FLOOR = 8;\n      Decimal2.EUCLID = 9;\n      Decimal2.config = Decimal2.set = config;\n      Decimal2.clone = clone;\n      Decimal2.isDecimal = isDecimalInstance;\n      Decimal2.abs = abs;\n      Decimal2.acos = acos;\n      Decimal2.acosh = acosh;\n      Decimal2.add = add;\n      Decimal2.asin = asin;\n      Decimal2.asinh = asinh;\n      Decimal2.atan = atan;\n      Decimal2.atanh = atanh;\n      Decimal2.atan2 = atan2;\n      Decimal2.cbrt = cbrt;\n      Decimal2.ceil = ceil;\n      Decimal2.cos = cos;\n      Decimal2.cosh = cosh;\n      Decimal2.div = div;\n      Decimal2.exp = exp;\n      Decimal2.floor = floor;\n      Decimal2.hypot = hypot;\n      Decimal2.ln = ln;\n      Decimal2.log = log;\n      Decimal2.log10 = log10;\n      Decimal2.log2 = log2;\n      Decimal2.max = max;\n      Decimal2.min = min;\n      Decimal2.mod = mod;\n      Decimal2.mul = mul;\n      Decimal2.pow = pow;\n      Decimal2.random = random;\n      Decimal2.round = round;\n      Decimal2.sign = sign;\n      Decimal2.sin = sin;\n      Decimal2.sinh = sinh;\n      Decimal2.sqrt = sqrt;\n      Decimal2.sub = sub;\n      Decimal2.tan = tan;\n      Decimal2.tanh = tanh;\n      Decimal2.trunc = trunc;\n      if (obj === void 0)\n        obj = {};\n      if (obj) {\n        if (obj.defaults !== true) {\n          ps = [\"precision\", \"rounding\", \"toExpNeg\", \"toExpPos\", \"maxE\", \"minE\", \"modulo\", \"crypto\"];\n          for (i = 0; i < ps.length; )\n            if (!obj.hasOwnProperty(p = ps[i++]))\n              obj[p] = this[p];\n        }\n      }\n      Decimal2.config(obj);\n      return Decimal2;\n    }\n    function div(x, y) {\n      return new this(x).div(y);\n    }\n    function exp(x) {\n      return new this(x).exp();\n    }\n    function floor(x) {\n      return finalise(x = new this(x), x.e + 1, 3);\n    }\n    function hypot() {\n      var i, n, t = new this(0);\n      external = false;\n      for (i = 0; i < arguments.length; ) {\n        n = new this(arguments[i++]);\n        if (!n.d) {\n          if (n.s) {\n            external = true;\n            return new this(1 / 0);\n          }\n          t = n;\n        } else if (t.d) {\n          t = t.plus(n.times(n));\n        }\n      }\n      external = true;\n      return t.sqrt();\n    }\n    function isDecimalInstance(obj) {\n      return obj instanceof Decimal || obj && obj.name === \"[object Decimal]\" || false;\n    }\n    function ln(x) {\n      return new this(x).ln();\n    }\n    function log(x, y) {\n      return new this(x).log(y);\n    }\n    function log2(x) {\n      return new this(x).log(2);\n    }\n    function log10(x) {\n      return new this(x).log(10);\n    }\n    function max() {\n      return maxOrMin(this, arguments, \"lt\");\n    }\n    function min() {\n      return maxOrMin(this, arguments, \"gt\");\n    }\n    function mod(x, y) {\n      return new this(x).mod(y);\n    }\n    function mul(x, y) {\n      return new this(x).mul(y);\n    }\n    function pow(x, y) {\n      return new this(x).pow(y);\n    }\n    function random(sd) {\n      var d, e, k, n, i = 0, r = new this(1), rd = [];\n      if (sd === void 0)\n        sd = this.precision;\n      else\n        checkInt32(sd, 1, MAX_DIGITS);\n      k = Math.ceil(sd / LOG_BASE);\n      if (!this.crypto) {\n        for (; i < k; )\n          rd[i++] = Math.random() * 1e7 | 0;\n      } else if (crypto.getRandomValues) {\n        d = crypto.getRandomValues(new Uint32Array(k));\n        for (; i < k; ) {\n          n = d[i];\n          if (n >= 429e7) {\n            d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\n          } else {\n            rd[i++] = n % 1e7;\n          }\n        }\n      } else if (crypto.randomBytes) {\n        d = crypto.randomBytes(k *= 4);\n        for (; i < k; ) {\n          n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 127) << 24);\n          if (n >= 214e7) {\n            crypto.randomBytes(4).copy(d, i);\n          } else {\n            rd.push(n % 1e7);\n            i += 4;\n          }\n        }\n        i = k / 4;\n      } else {\n        throw Error(cryptoUnavailable);\n      }\n      k = rd[--i];\n      sd %= LOG_BASE;\n      if (k && sd) {\n        n = mathpow(10, LOG_BASE - sd);\n        rd[i] = (k / n | 0) * n;\n      }\n      for (; rd[i] === 0; i--)\n        rd.pop();\n      if (i < 0) {\n        e = 0;\n        rd = [0];\n      } else {\n        e = -1;\n        for (; rd[0] === 0; e -= LOG_BASE)\n          rd.shift();\n        for (k = 1, n = rd[0]; n >= 10; n /= 10)\n          k++;\n        if (k < LOG_BASE)\n          e -= LOG_BASE - k;\n      }\n      r.e = e;\n      r.d = rd;\n      return r;\n    }\n    function round(x) {\n      return finalise(x = new this(x), x.e + 1, this.rounding);\n    }\n    function sign(x) {\n      x = new this(x);\n      return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;\n    }\n    function sin(x) {\n      return new this(x).sin();\n    }\n    function sinh(x) {\n      return new this(x).sinh();\n    }\n    function sqrt(x) {\n      return new this(x).sqrt();\n    }\n    function sub(x, y) {\n      return new this(x).sub(y);\n    }\n    function tan(x) {\n      return new this(x).tan();\n    }\n    function tanh(x) {\n      return new this(x).tanh();\n    }\n    function trunc(x) {\n      return finalise(x = new this(x), x.e + 1, 1);\n    }\n    Decimal = clone(DEFAULTS);\n    Decimal[\"default\"] = Decimal.Decimal = Decimal;\n    LN10 = new Decimal(LN10);\n    PI = new Decimal(PI);\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        return Decimal;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n  })(exports2);\n});\n\n// src/runtime/index-browser.ts\n__export(exports, {\n  Decimal: () => decimal.default\n});\nvar decimal = __toModule(require_decimal());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@prisma/client/runtime/index-browser.js\n");

/***/ }),

/***/ "./src/components/diff.js":
/*!********************************!*\
  !*** ./src/components/diff.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chakra-ui/react */ \"./node_modules/@chakra-ui/react/dist/esm/index.js\");\n/* harmony import */ var _components_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/layout */ \"./src/components/layout.js\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @prisma/client */ \"./node_modules/@prisma/client/index-browser.js\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_3__);\nvar _this = undefined,\n    _jsxFileName = \"/home/veeresh/opensource/flocks-ui/src/components/diff.js\";\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;\n\n\n\n\nvar Cell = function Cell(_ref) {\n  var children = _ref.children,\n      responsive = _ref.responsive,\n      header = _ref.header,\n      showMD = _ref.showMD;\n  var CellType = _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Td\"];\n\n  if (header) {\n    CellType = _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Th\"];\n  }\n\n  var displayType = ['none', 'none', 'None', 'table-cell', 'table-cell'];\n\n  if (showMD) {\n    displayType = ['none', 'none', 'table-cell', 'table-cell', 'table-cell'];\n  }\n\n  if (responsive) {\n    return __jsx(CellType, {\n      display: displayType,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  return __jsx(CellType, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }\n  }, children);\n};\n\n_c = Cell;\n\nvar Row = function Row(mf) {\n  var badgeColors = {\n    entry: 'green',\n    exit: 'red',\n    reduced: 'red',\n    increased: 'green',\n    held: 'gray'\n  };\n  return __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Tr\"], {\n    key: mf.stock_name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(Cell, {\n    responsive: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \" \", mf.stock_name), __jsx(Cell, {\n    responsive: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, mf.industry), __jsx(Cell, {\n    responsive: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Badge\"], {\n    variant: \"outline\",\n    colorScheme: badgeColors[mf.state],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, mf.state)), __jsx(Cell, {\n    responsive: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, mf.current_quantity), __jsx(Cell, {\n    responsive: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, mf.previous_quantity), __jsx(Cell, {\n    responsive: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, mf.change_quantity), __jsx(Cell, {\n    responsive: true,\n    showMD: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, Number(mf.change_market_value).toFixed(2)), __jsx(Cell, {\n    responsive: true,\n    showMD: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, Number(mf.change_percentage_aum).toFixed(2)));\n};\n\n_c2 = Row;\n\nvar DiffPage = function DiffPage(_ref2) {\n  var caption = _ref2.caption,\n      mutual_funds = _ref2.mutual_funds;\n  return __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Stack\"], {\n    spacing: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Text\"], {\n    fontSize: \"lg\",\n    ml: 6,\n    color: \"gray.600\",\n    as: \"b\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, \"Parag Parikh Long Term Equity Fund's portfolio changes in November, 2020.\"), __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Divider\"], {\n    orientation: \"horizontal\",\n    colorScheme: \"teal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Table\"], {\n    variant: \"simple\",\n    colorScheme: \"teal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"TableCaption\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, caption), __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Thead\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Tr\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, __jsx(Cell, {\n    responsive: false,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, 'Stock name'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, 'Industry'), __jsx(Cell, {\n    responsive: false,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 25\n    }\n  }, 'State'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }, 'Current Quantity'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, 'Previous Quantity'), __jsx(Cell, {\n    responsive: false,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }, 'Change in Quantity'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    showMD: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  }, 'Change in Value(in Lacs)'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    showMD: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }\n  }, 'Change in AUM %'))), __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Tbody\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, mutual_funds.entry.map(Row), mutual_funds.increased.map(Row), mutual_funds.held.map(Row), mutual_funds.reduced.map(Row), mutual_funds.exit.map(Row))));\n};\n\n_c3 = DiffPage;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"DiffPage\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvZGlmZi5qcz8yM2M2Il0sIm5hbWVzIjpbIkNlbGwiLCJjaGlsZHJlbiIsInJlc3BvbnNpdmUiLCJoZWFkZXIiLCJzaG93TUQiLCJDZWxsVHlwZSIsIlRkIiwiVGgiLCJkaXNwbGF5VHlwZSIsIlJvdyIsIm1mIiwiYmFkZ2VDb2xvcnMiLCJlbnRyeSIsImV4aXQiLCJyZWR1Y2VkIiwiaW5jcmVhc2VkIiwiaGVsZCIsInN0b2NrX25hbWUiLCJpbmR1c3RyeSIsInN0YXRlIiwiY3VycmVudF9xdWFudGl0eSIsInByZXZpb3VzX3F1YW50aXR5IiwiY2hhbmdlX3F1YW50aXR5IiwiTnVtYmVyIiwiY2hhbmdlX21hcmtldF92YWx1ZSIsInRvRml4ZWQiLCJjaGFuZ2VfcGVyY2VudGFnZV9hdW0iLCJEaWZmUGFnZSIsImNhcHRpb24iLCJtdXR1YWxfZnVuZHMiLCJtYXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBY0E7QUFFQTs7QUFFQSxJQUFNQSxJQUFJLEdBQUcsU0FBUEEsSUFBTyxPQUE4QztBQUFBLE1BQTNDQyxRQUEyQyxRQUEzQ0EsUUFBMkM7QUFBQSxNQUFqQ0MsVUFBaUMsUUFBakNBLFVBQWlDO0FBQUEsTUFBckJDLE1BQXFCLFFBQXJCQSxNQUFxQjtBQUFBLE1BQWJDLE1BQWEsUUFBYkEsTUFBYTtBQUN2RCxNQUFJQyxRQUFRLEdBQUdDLG1EQUFmOztBQUNBLE1BQUlILE1BQUosRUFBWTtBQUNSRSxZQUFRLEdBQUdFLG1EQUFYO0FBQ0g7O0FBRUQsTUFBSUMsV0FBVyxHQUFHLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsTUFBakIsRUFBeUIsWUFBekIsRUFBdUMsWUFBdkMsQ0FBbEI7O0FBQ0EsTUFBSUosTUFBSixFQUFZO0FBQ1JJLGVBQVcsR0FBRyxDQUNWLE1BRFUsRUFFVixNQUZVLEVBR1YsWUFIVSxFQUlWLFlBSlUsRUFLVixZQUxVLENBQWQ7QUFPSDs7QUFFRCxNQUFJTixVQUFKLEVBQWdCO0FBQ1osV0FBTyxNQUFDLFFBQUQ7QUFBVSxhQUFPLEVBQUVNLFdBQW5CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FBaUNQLFFBQWpDLENBQVA7QUFDSDs7QUFFRCxTQUFPLE1BQUMsUUFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQVdBLFFBQVgsQ0FBUDtBQUNILENBdEJEOztLQUFNRCxJOztBQXdCTixJQUFNUyxHQUFHLEdBQUcsU0FBTkEsR0FBTSxDQUFDQyxFQUFELEVBQVE7QUFDaEIsTUFBTUMsV0FBVyxHQUFHO0FBQ2hCQyxTQUFLLEVBQUUsT0FEUztBQUVoQkMsUUFBSSxFQUFFLEtBRlU7QUFHaEJDLFdBQU8sRUFBRSxLQUhPO0FBSWhCQyxhQUFTLEVBQUUsT0FKSztBQUtoQkMsUUFBSSxFQUFFO0FBTFUsR0FBcEI7QUFRQSxTQUNJLE1BQUMsbURBQUQ7QUFBSSxPQUFHLEVBQUVOLEVBQUUsQ0FBQ08sVUFBWjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ksTUFBQyxJQUFEO0FBQU0sY0FBVSxFQUFFLEtBQWxCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFBMkJQLEVBQUUsQ0FBQ08sVUFBOUIsQ0FESixFQUVJLE1BQUMsSUFBRDtBQUFNLGNBQVUsRUFBRSxJQUFsQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQXlCUCxFQUFFLENBQUNRLFFBQTVCLENBRkosRUFHSSxNQUFDLElBQUQ7QUFBTSxjQUFVLEVBQUUsS0FBbEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUNJLE1BQUMsc0RBQUQ7QUFBTyxXQUFPLEVBQUMsU0FBZjtBQUF5QixlQUFXLEVBQUVQLFdBQVcsQ0FBQ0QsRUFBRSxDQUFDUyxLQUFKLENBQWpEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDS1QsRUFBRSxDQUFDUyxLQURSLENBREosQ0FISixFQVFJLE1BQUMsSUFBRDtBQUFNLGNBQVUsRUFBRSxJQUFsQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQXlCVCxFQUFFLENBQUNVLGdCQUE1QixDQVJKLEVBU0ksTUFBQyxJQUFEO0FBQU0sY0FBVSxFQUFFLElBQWxCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FBeUJWLEVBQUUsQ0FBQ1csaUJBQTVCLENBVEosRUFVSSxNQUFDLElBQUQ7QUFBTSxjQUFVLEVBQUUsS0FBbEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUEwQlgsRUFBRSxDQUFDWSxlQUE3QixDQVZKLEVBV0ksTUFBQyxJQUFEO0FBQU0sY0FBVSxFQUFFLElBQWxCO0FBQXdCLFVBQU0sRUFBRSxJQUFoQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0tDLE1BQU0sQ0FBQ2IsRUFBRSxDQUFDYyxtQkFBSixDQUFOLENBQStCQyxPQUEvQixDQUF1QyxDQUF2QyxDQURMLENBWEosRUFjSSxNQUFDLElBQUQ7QUFBTSxjQUFVLEVBQUUsSUFBbEI7QUFBd0IsVUFBTSxFQUFFLElBQWhDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDS0YsTUFBTSxDQUFDYixFQUFFLENBQUNnQixxQkFBSixDQUFOLENBQWlDRCxPQUFqQyxDQUF5QyxDQUF6QyxDQURMLENBZEosQ0FESjtBQW9CSCxDQTdCRDs7TUFBTWhCLEc7O0FBK0JOLElBQU1rQixRQUFRLEdBQUcsU0FBWEEsUUFBVyxRQUErQjtBQUFBLE1BQTVCQyxPQUE0QixTQUE1QkEsT0FBNEI7QUFBQSxNQUFuQkMsWUFBbUIsU0FBbkJBLFlBQW1CO0FBQzVDLFNBQ0ksTUFBQyxzREFBRDtBQUFPLFdBQU8sRUFBRSxDQUFoQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ksTUFBQyxxREFBRDtBQUFNLFlBQVEsRUFBQyxJQUFmO0FBQW9CLE1BQUUsRUFBRSxDQUF4QjtBQUEyQixTQUFLLEVBQUMsVUFBakM7QUFBNEMsTUFBRSxFQUFDLEdBQS9DO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUZBREosRUFNSSxNQUFDLHdEQUFEO0FBQVMsZUFBVyxFQUFDLFlBQXJCO0FBQWtDLGVBQVcsRUFBQyxNQUE5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTkosRUFRSSxNQUFDLHNEQUFEO0FBQU8sV0FBTyxFQUFDLFFBQWY7QUFBd0IsZUFBVyxFQUFDLE1BQXBDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDSSxNQUFDLDZEQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FBZUQsT0FBZixDQURKLEVBRUksTUFBQyxzREFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ksTUFBQyxtREFBRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ksTUFBQyxJQUFEO0FBQU0sY0FBVSxFQUFFLEtBQWxCO0FBQXlCLFVBQU0sRUFBRSxJQUFqQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ssWUFETCxDQURKLEVBS0ksTUFBQyxJQUFEO0FBQU0sY0FBVSxFQUFFLElBQWxCO0FBQXdCLFVBQU0sRUFBRSxJQUFoQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ssVUFETCxDQUxKLEVBU0ksTUFBQyxJQUFEO0FBQU0sY0FBVSxFQUFFLEtBQWxCO0FBQXlCLFVBQU0sRUFBRSxJQUFqQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ssT0FETCxDQVRKLEVBYUksTUFBQyxJQUFEO0FBQU0sY0FBVSxFQUFFLElBQWxCO0FBQXdCLFVBQU0sRUFBRSxJQUFoQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ssa0JBREwsQ0FiSixFQWdCSSxNQUFDLElBQUQ7QUFBTSxjQUFVLEVBQUUsSUFBbEI7QUFBd0IsVUFBTSxFQUFFLElBQWhDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDSyxtQkFETCxDQWhCSixFQW1CSSxNQUFDLElBQUQ7QUFBTSxjQUFVLEVBQUUsS0FBbEI7QUFBeUIsVUFBTSxFQUFFLElBQWpDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDSyxvQkFETCxDQW5CSixFQXNCSSxNQUFDLElBQUQ7QUFBTSxjQUFVLEVBQUUsSUFBbEI7QUFBd0IsVUFBTSxFQUFFLElBQWhDO0FBQXNDLFVBQU0sRUFBRSxJQUE5QztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0ssMEJBREwsQ0F0QkosRUF5QkksTUFBQyxJQUFEO0FBQU0sY0FBVSxFQUFFLElBQWxCO0FBQXdCLFVBQU0sRUFBRSxJQUFoQztBQUFzQyxVQUFNLEVBQUUsSUFBOUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxLQUNLLGlCQURMLENBekJKLENBREosQ0FGSixFQWtDSSxNQUFDLHNEQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsS0FDS0MsWUFBWSxDQUFDakIsS0FBYixDQUFtQmtCLEdBQW5CLENBQXVCckIsR0FBdkIsQ0FETCxFQUVLb0IsWUFBWSxDQUFDZCxTQUFiLENBQXVCZSxHQUF2QixDQUEyQnJCLEdBQTNCLENBRkwsRUFHS29CLFlBQVksQ0FBQ2IsSUFBYixDQUFrQmMsR0FBbEIsQ0FBc0JyQixHQUF0QixDQUhMLEVBSUtvQixZQUFZLENBQUNmLE9BQWIsQ0FBcUJnQixHQUFyQixDQUF5QnJCLEdBQXpCLENBSkwsRUFLS29CLFlBQVksQ0FBQ2hCLElBQWIsQ0FBa0JpQixHQUFsQixDQUFzQnJCLEdBQXRCLENBTEwsQ0FsQ0osQ0FSSixDQURKO0FBcURILENBdEREOztNQUFNa0IsUSIsImZpbGUiOiIuL3NyYy9jb21wb25lbnRzL2RpZmYuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIFRhYmxlLFxuICAgIFRoZWFkLFxuICAgIFRib2R5LFxuICAgIFRleHQsXG4gICAgQmFkZ2UsXG4gICAgVHIsXG4gICAgVGgsXG4gICAgVGQsXG4gICAgVGFibGVDYXB0aW9uLFxuICAgIERpdmlkZXIsXG4gICAgU3RhY2tcbn0gZnJvbSAnQGNoYWtyYS11aS9yZWFjdCc7XG5cbmltcG9ydCBMYXlvdXQgZnJvbSAnLi4vY29tcG9uZW50cy9sYXlvdXQnO1xuXG5pbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XG5cbmNvbnN0IENlbGwgPSAoeyBjaGlsZHJlbiwgcmVzcG9uc2l2ZSwgaGVhZGVyLCBzaG93TUQgfSkgPT4ge1xuICAgIGxldCBDZWxsVHlwZSA9IFRkO1xuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgICAgQ2VsbFR5cGUgPSBUaDtcbiAgICB9XG5cbiAgICBsZXQgZGlzcGxheVR5cGUgPSBbJ25vbmUnLCAnbm9uZScsICdOb25lJywgJ3RhYmxlLWNlbGwnLCAndGFibGUtY2VsbCddO1xuICAgIGlmIChzaG93TUQpIHtcbiAgICAgICAgZGlzcGxheVR5cGUgPSBbXG4gICAgICAgICAgICAnbm9uZScsXG4gICAgICAgICAgICAnbm9uZScsXG4gICAgICAgICAgICAndGFibGUtY2VsbCcsXG4gICAgICAgICAgICAndGFibGUtY2VsbCcsXG4gICAgICAgICAgICAndGFibGUtY2VsbCdcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBpZiAocmVzcG9uc2l2ZSkge1xuICAgICAgICByZXR1cm4gPENlbGxUeXBlIGRpc3BsYXk9e2Rpc3BsYXlUeXBlfT57Y2hpbGRyZW59PC9DZWxsVHlwZT47XG4gICAgfVxuXG4gICAgcmV0dXJuIDxDZWxsVHlwZT57Y2hpbGRyZW59PC9DZWxsVHlwZT47XG59O1xuXG5jb25zdCBSb3cgPSAobWYpID0+IHtcbiAgICBjb25zdCBiYWRnZUNvbG9ycyA9IHtcbiAgICAgICAgZW50cnk6ICdncmVlbicsXG4gICAgICAgIGV4aXQ6ICdyZWQnLFxuICAgICAgICByZWR1Y2VkOiAncmVkJyxcbiAgICAgICAgaW5jcmVhc2VkOiAnZ3JlZW4nLFxuICAgICAgICBoZWxkOiAnZ3JheSdcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFRyIGtleT17bWYuc3RvY2tfbmFtZX0+XG4gICAgICAgICAgICA8Q2VsbCByZXNwb25zaXZlPXtmYWxzZX0+IHttZi5zdG9ja19uYW1lfTwvQ2VsbD5cbiAgICAgICAgICAgIDxDZWxsIHJlc3BvbnNpdmU9e3RydWV9PnttZi5pbmR1c3RyeX08L0NlbGw+XG4gICAgICAgICAgICA8Q2VsbCByZXNwb25zaXZlPXtmYWxzZX0+XG4gICAgICAgICAgICAgICAgPEJhZGdlIHZhcmlhbnQ9XCJvdXRsaW5lXCIgY29sb3JTY2hlbWU9e2JhZGdlQ29sb3JzW21mLnN0YXRlXX0+XG4gICAgICAgICAgICAgICAgICAgIHttZi5zdGF0ZX1cbiAgICAgICAgICAgICAgICA8L0JhZGdlPlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgPENlbGwgcmVzcG9uc2l2ZT17dHJ1ZX0+e21mLmN1cnJlbnRfcXVhbnRpdHl9PC9DZWxsPlxuICAgICAgICAgICAgPENlbGwgcmVzcG9uc2l2ZT17dHJ1ZX0+e21mLnByZXZpb3VzX3F1YW50aXR5fTwvQ2VsbD5cbiAgICAgICAgICAgIDxDZWxsIHJlc3BvbnNpdmU9e2ZhbHNlfT57bWYuY2hhbmdlX3F1YW50aXR5fTwvQ2VsbD5cbiAgICAgICAgICAgIDxDZWxsIHJlc3BvbnNpdmU9e3RydWV9IHNob3dNRD17dHJ1ZX0+XG4gICAgICAgICAgICAgICAge051bWJlcihtZi5jaGFuZ2VfbWFya2V0X3ZhbHVlKS50b0ZpeGVkKDIpfVxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgPENlbGwgcmVzcG9uc2l2ZT17dHJ1ZX0gc2hvd01EPXt0cnVlfT5cbiAgICAgICAgICAgICAgICB7TnVtYmVyKG1mLmNoYW5nZV9wZXJjZW50YWdlX2F1bSkudG9GaXhlZCgyKX1cbiAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgPC9Ucj5cbiAgICApO1xufTtcblxuY29uc3QgRGlmZlBhZ2UgPSAoeyBjYXB0aW9uLCBtdXR1YWxfZnVuZHMgfSkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICAgIDxTdGFjayBzcGFjaW5nPXsyfT5cbiAgICAgICAgICAgIDxUZXh0IGZvbnRTaXplPVwibGdcIiBtbD17Nn0gY29sb3I9XCJncmF5LjYwMFwiIGFzPVwiYlwiPlxuICAgICAgICAgICAgICAgIFBhcmFnIFBhcmlraCBMb25nIFRlcm0gRXF1aXR5IEZ1bmQncyBwb3J0Zm9saW8gY2hhbmdlcyBpblxuICAgICAgICAgICAgICAgIE5vdmVtYmVyLCAyMDIwLlxuICAgICAgICAgICAgPC9UZXh0PlxuXG4gICAgICAgICAgICA8RGl2aWRlciBvcmllbnRhdGlvbj1cImhvcml6b250YWxcIiBjb2xvclNjaGVtZT1cInRlYWxcIiAvPlxuXG4gICAgICAgICAgICA8VGFibGUgdmFyaWFudD1cInNpbXBsZVwiIGNvbG9yU2NoZW1lPVwidGVhbFwiPlxuICAgICAgICAgICAgICAgIDxUYWJsZUNhcHRpb24+e2NhcHRpb259PC9UYWJsZUNhcHRpb24+XG4gICAgICAgICAgICAgICAgPFRoZWFkPlxuICAgICAgICAgICAgICAgICAgICA8VHI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2VsbCByZXNwb25zaXZlPXtmYWxzZX0gaGVhZGVyPXt0cnVlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J1N0b2NrIG5hbWUnfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DZWxsPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2VsbCByZXNwb25zaXZlPXt0cnVlfSBoZWFkZXI9e3RydWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnSW5kdXN0cnknfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DZWxsPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2VsbCByZXNwb25zaXZlPXtmYWxzZX0gaGVhZGVyPXt0cnVlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J1N0YXRlJ31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2VsbD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPENlbGwgcmVzcG9uc2l2ZT17dHJ1ZX0gaGVhZGVyPXt0cnVlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J0N1cnJlbnQgUXVhbnRpdHknfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPENlbGwgcmVzcG9uc2l2ZT17dHJ1ZX0gaGVhZGVyPXt0cnVlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J1ByZXZpb3VzIFF1YW50aXR5J31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDZWxsIHJlc3BvbnNpdmU9e2ZhbHNlfSBoZWFkZXI9e3RydWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnQ2hhbmdlIGluIFF1YW50aXR5J31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDZWxsIHJlc3BvbnNpdmU9e3RydWV9IGhlYWRlcj17dHJ1ZX0gc2hvd01EPXt0cnVlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J0NoYW5nZSBpbiBWYWx1ZShpbiBMYWNzKSd9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q2VsbCByZXNwb25zaXZlPXt0cnVlfSBoZWFkZXI9e3RydWV9IHNob3dNRD17dHJ1ZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeydDaGFuZ2UgaW4gQVVNICUnfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgICAgICAgICA8L1RyPlxuICAgICAgICAgICAgICAgIDwvVGhlYWQ+XG5cbiAgICAgICAgICAgICAgICA8VGJvZHk+XG4gICAgICAgICAgICAgICAgICAgIHttdXR1YWxfZnVuZHMuZW50cnkubWFwKFJvdyl9XG4gICAgICAgICAgICAgICAgICAgIHttdXR1YWxfZnVuZHMuaW5jcmVhc2VkLm1hcChSb3cpfVxuICAgICAgICAgICAgICAgICAgICB7bXV0dWFsX2Z1bmRzLmhlbGQubWFwKFJvdyl9XG4gICAgICAgICAgICAgICAgICAgIHttdXR1YWxfZnVuZHMucmVkdWNlZC5tYXAoUm93KX1cbiAgICAgICAgICAgICAgICAgICAge211dHVhbF9mdW5kcy5leGl0Lm1hcChSb3cpfVxuICAgICAgICAgICAgICAgIDwvVGJvZHk+XG4gICAgICAgICAgICA8L1RhYmxlPlxuICAgICAgICA8L1N0YWNrPlxuICAgICk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/diff.js\n");

/***/ }),

/***/ "./src/pages/index.js":
/*!****************************!*\
  !*** ./src/pages/index.js ***!
  \****************************/
/*! exports provided: __N_SSG, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__N_SSG\", function() { return __N_SSG; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @chakra-ui/react */ \"./node_modules/@chakra-ui/react/dist/esm/index.js\");\n/* harmony import */ var _components_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/layout */ \"./src/components/layout.js\");\n/* harmony import */ var _components_diff__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/diff */ \"./src/components/diff.js\");\nvar _this = undefined,\n    _jsxFileName = \"/home/veeresh/opensource/flocks-ui/src/pages/index.js\";\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;\n\n\n\n\nvar Cell = function Cell(_ref) {\n  var children = _ref.children,\n      responsive = _ref.responsive,\n      header = _ref.header,\n      showMD = _ref.showMD;\n  var CellType = _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Td\"];\n\n  if (header) {\n    CellType = _chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Th\"];\n  }\n\n  var displayType = ['none', 'none', 'None', 'table-cell', 'table-cell'];\n\n  if (showMD) {\n    displayType = ['none', 'none', 'table-cell', 'table-cell', 'table-cell'];\n  }\n\n  if (responsive) {\n    return __jsx(CellType, {\n      display: displayType,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  return __jsx(CellType, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }\n  }, children);\n};\n\n_c = Cell;\n\nvar Row = function Row(mf) {\n  var badgeColors = {\n    entry: 'green',\n    exit: 'red',\n    reduced: 'red',\n    increased: 'green',\n    held: 'gray'\n  };\n  return __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Tr\"], {\n    key: mf.stock_name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(Cell, {\n    responsive: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \" \", mf.stock_name), __jsx(Cell, {\n    responsive: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, mf.industry), __jsx(Cell, {\n    responsive: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Badge\"], {\n    variant: \"outline\",\n    colorScheme: badgeColors[mf.state],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, mf.state)), __jsx(Cell, {\n    responsive: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, mf.current_quantity), __jsx(Cell, {\n    responsive: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, mf.previous_quantity), __jsx(Cell, {\n    responsive: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, mf.change_quantity), __jsx(Cell, {\n    responsive: true,\n    showMD: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, Number(mf.change_market_value).toFixed(2)), __jsx(Cell, {\n    responsive: true,\n    showMD: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, Number(mf.change_percentage_aum).toFixed(2)));\n};\n\n_c2 = Row;\n\nvar IndexPage = function IndexPage(_ref2) {\n  var caption = _ref2.caption,\n      mutual_funds = _ref2.mutual_funds;\n  return __jsx(_components_layout__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Stack\"], {\n    spacing: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Text\"], {\n    fontSize: \"lg\",\n    ml: 6,\n    color: \"gray.600\",\n    as: \"b\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"Parag Parikh Long Term Equity Fund's portfolio changes in November, 2020.\"), __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Divider\"], {\n    orientation: \"horizontal\",\n    colorScheme: \"teal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Table\"], {\n    variant: \"simple\",\n    colorScheme: \"teal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"TableCaption\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, caption), __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Thead\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Tr\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }, __jsx(Cell, {\n    responsive: false,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 29\n    }\n  }, 'Stock name'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 29\n    }\n  }, 'Industry'), __jsx(Cell, {\n    responsive: false,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 29\n    }\n  }, 'State'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 29\n    }\n  }, 'Current Quantity'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, 'Previous Quantity'), __jsx(Cell, {\n    responsive: false,\n    header: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }, 'Change in Quantity'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    showMD: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }, 'Change in Value(in Lacs)'), __jsx(Cell, {\n    responsive: true,\n    header: true,\n    showMD: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, 'Change in AUM %'))), __jsx(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_1__[\"Tbody\"], {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, mutual_funds.entry.map(Row), mutual_funds.increased.map(Row), mutual_funds.held.map(Row), mutual_funds.reduced.map(Row), mutual_funds.exit.map(Row)))));\n};\n\n_c3 = IndexPage;\nvar __N_SSG = true;\n/* harmony default export */ __webpack_exports__[\"default\"] = (IndexPage);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"IndexPage\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/pages/index.js\n");

/***/ })

})